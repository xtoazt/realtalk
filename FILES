### hooks/use-user.ts
// --- User context -----------------------------------------------------------
import React, { createContext, useContext } from "react"

type UserContextValue = ReturnType<typeof useUser>

/**
 * React Context for globally accessing user data produced by useUser().
 */
const UserContext = createContext<UserContextValue | undefined>(undefined)

/**
 * UserProvider â€“ wraps the app and makes the user object available
 * everywhere via the UserContext.  
 * Usage:
 *   <UserProvider>
 *     <App />
 *   </UserProvider>
 */
export function UserProvider({ children }: { children: React.ReactNode }) {
  const value = useUser()
  return (
    <UserContext.Provider value={value}>
      {children}
    </UserContext.Provider>
  )
}

/**
 * Convenience hook to consume the UserContext.
 */
export function useUserContext() {
  const ctx = useContext(UserContext)
  if (!ctx) {
    throw new Error("useUserContext must be used within a UserProvider")
  }
  return ctx
}

### lib/auth.ts
// --- Aggregate auth helpers for convenient import --------------------------
export const auth = {
  hashPassword,
  verifyPassword,
  generateToken,
  verifyToken,
  getCurrentUser,
  signUp,
  signIn,
}
