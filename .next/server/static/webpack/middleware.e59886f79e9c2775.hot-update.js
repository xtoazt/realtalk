/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("middleware",{

/***/ "(middleware)/./lib/db.ts":
/*!*******************!*\
  !*** ./lib/db.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addMessageReaction: () => (/* binding */ addMessageReaction),\n/* harmony export */   clearUserFrozen: () => (/* binding */ clearUserFrozen),\n/* harmony export */   createFriendship: () => (/* binding */ createFriendship),\n/* harmony export */   createGroupChat: () => (/* binding */ createGroupChat),\n/* harmony export */   createMessage: () => (/* binding */ createMessage),\n/* harmony export */   createNotification: () => (/* binding */ createNotification),\n/* harmony export */   createUser: () => (/* binding */ createUser),\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   deleteGroupChat: () => (/* binding */ deleteGroupChat),\n/* harmony export */   getAcceptedFriends: () => (/* binding */ getAcceptedFriends),\n/* harmony export */   getFriendships: () => (/* binding */ getFriendships),\n/* harmony export */   getMessages: () => (/* binding */ getMessages),\n/* harmony export */   getOnlineUsers: () => (/* binding */ getOnlineUsers),\n/* harmony export */   getUnreadNotifications: () => (/* binding */ getUnreadNotifications),\n/* harmony export */   getUserById: () => (/* binding */ getUserById),\n/* harmony export */   getUserByUsername: () => (/* binding */ getUserByUsername),\n/* harmony export */   getUserDMs: () => (/* binding */ getUserDMs),\n/* harmony export */   getUserFreezeStatus: () => (/* binding */ getUserFreezeStatus),\n/* harmony export */   getUserGroupChats: () => (/* binding */ getUserGroupChats),\n/* harmony export */   markNotificationAsRead: () => (/* binding */ markNotificationAsRead),\n/* harmony export */   query: () => (/* binding */ query),\n/* harmony export */   removeMessageReaction: () => (/* binding */ removeMessageReaction),\n/* harmony export */   searchUsers: () => (/* binding */ searchUsers),\n/* harmony export */   setUserFrozen: () => (/* binding */ setUserFrozen),\n/* harmony export */   updateFriendshipStatus: () => (/* binding */ updateFriendshipStatus),\n/* harmony export */   updateUserActivity: () => (/* binding */ updateUserActivity),\n/* harmony export */   updateUserSettings: () => (/* binding */ updateUserSettings)\n/* harmony export */ });\n/* harmony import */ var server_only__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! server-only */ \"(middleware)/./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/server-only/empty.js\");\n/* harmony import */ var server_only__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(server_only__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @neondatabase/serverless */ \"(middleware)/./node_modules/.pnpm/@neondatabase+serverless@1.0.1/node_modules/@neondatabase/serverless/index.mjs\");\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/constants */ \"(middleware)/./lib/constants.ts\");\n\n\n\n// Check if we should use SQLite for local development\nconst databaseUrl = process.env.DATABASE_URL || \"\";\nconst useSQLite = !databaseUrl.includes('postgresql://') || databaseUrl.includes('localhost:5432');\nlet sql;\nif (useSQLite) {\n    // Use SQLite for local development\n    console.log(\"[db] Using SQLite database for local development\");\n    try {\n        const Database = __webpack_require__(/*! better-sqlite3 */ \"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/index.js\");\n        const db = new Database('./realtalk.db');\n        // Create a simple wrapper to match the Neon interface\n        const sqliteWrapper = {\n            async query (strings, ...values) {\n                const query = strings.join('?');\n                console.log(\"[db] SQLite query:\", query, values);\n                try {\n                    const stmt = db.prepare(query);\n                    const result = stmt.all(...values);\n                    return result;\n                } catch (error) {\n                    console.error(\"[db] SQLite error:\", error);\n                    throw error;\n                }\n            },\n            async unsafe (query, params = []) {\n                console.log(\"[db] SQLite unsafe query:\", query, params);\n                try {\n                    const stmt = db.prepare(query);\n                    const result = stmt.run(...params);\n                    return result;\n                } catch (error) {\n                    console.error(\"[db] SQLite unsafe error:\", error);\n                    throw error;\n                }\n            }\n        };\n        sql = sqliteWrapper;\n    } catch (error) {\n        console.error(\"[db] Failed to initialize SQLite:\", error);\n        // Fallback to mock database\n        const mockDb = {\n            async query (strings, ...values) {\n                console.log(\"[db] Mock query:\", strings.join('?'), values);\n                return [];\n            },\n            async unsafe (query, params = []) {\n                console.log(\"[db] Mock unsafe query:\", query, params);\n                return {\n                    changes: 0\n                };\n            }\n        };\n        sql = mockDb;\n    }\n} else {\n    // Use Neon PostgreSQL\n    try {\n        sql = (0,_neondatabase_serverless__WEBPACK_IMPORTED_MODULE_1__.neon)(process.env.DATABASE_URL);\n    } catch (error) {\n        console.error(\"[db] Failed to connect to Neon, falling back to mock:\", error);\n        const mockDb = {\n            async query (strings, ...values) {\n                console.log(\"[db] Mock query:\", strings.join('?'), values);\n                return [];\n            },\n            async unsafe (query, params = []) {\n                console.log(\"[db] Mock unsafe query:\", query, params);\n                return {\n                    changes: 0\n                };\n            }\n        };\n        sql = mockDb;\n    }\n}\nconst query = sql;\nconst db = sql;\n// Database helper functions\nasync function createUser(username, passwordHash, signupCode) {\n    try {\n        let nameColor = null;\n        const customTitle = null;\n        let hasGoldAnimation = false;\n        if (signupCode === \"asdf\") {\n            nameColor = \"#6366f1\";\n        } else if (signupCode === \"qwea\") {\n            hasGoldAnimation = true;\n        }\n        const result = await sql`\n      INSERT INTO users (username, password_hash, signup_code, name_color, has_gold_animation, email, last_active, theme, hue, ui_mode)\n      VALUES (${username}, ${passwordHash}, ${signupCode}, ${nameColor}, ${hasGoldAnimation}, NULL, NOW(), 'light', 'blue', 'full')\n      RETURNING id, username, email, signup_code, name_color, custom_title, has_gold_animation, notifications_enabled, theme, hue, profile_picture, bio, ui_mode\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] createUser error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function getUserByUsername(username) {\n    try {\n        const rows = await sql`\n      SELECT *\n      FROM users\n      WHERE username = ${username}\n      LIMIT 1\n    `;\n        return rows[0];\n    } catch (err) {\n        console.error(\"[db] getUserByUsername error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function getUserById(id) {\n    try {\n        const result = await sql`\n      SELECT id, username, email, signup_code, name_color, custom_title, has_gold_animation, \n             notifications_enabled, theme, hue, profile_picture, bio, ui_mode\n      FROM users WHERE id = ${id}\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] getUserById error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function updateUserActivity(userId) {\n    try {\n        await sql`\n      UPDATE users \n      SET last_active = NOW()\n      WHERE id = ${userId}\n    `;\n        return true;\n    } catch (err) {\n        console.error(\"[db] updateUserActivity error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function getOnlineUsers(currentUserId) {\n    try {\n        const result = await sql`\n      SELECT DISTINCT u.id, u.username, u.name_color, u.has_gold_animation, u.last_active\n      FROM users u\n      JOIN friendships f ON (\n        (f.requester_id = ${currentUserId} AND f.addressee_id = u.id) OR\n        (f.addressee_id = ${currentUserId} AND f.requester_id = u.id)\n      )\n      WHERE u.last_active > NOW() - INTERVAL '10 minutes'\n      AND f.status = 'accepted'\n      AND u.id != ${currentUserId}\n      AND u.id != ${_lib_constants__WEBPACK_IMPORTED_MODULE_2__.AI_USER_ID}\n      ORDER BY u.username\n    `;\n        return result;\n    } catch (err) {\n        console.error(\"[db] getOnlineUsers error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function searchUsers(searchQuery, currentUserId) {\n    try {\n        const result = await sql`\n      SELECT id, username, name_color, custom_title, has_gold_animation\n      FROM users \n      WHERE username ILIKE ${`%${searchQuery}%`} \n      AND id != ${currentUserId}\n      AND id != ${_lib_constants__WEBPACK_IMPORTED_MODULE_2__.AI_USER_ID}\n      LIMIT 10\n    `;\n        return result;\n    } catch (err) {\n        console.error(\"[db] searchUsers error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function getMessages(chatType, chatId, userId, limit = 50) {\n    try {\n        if (chatType === \"global\") {\n            const result = await sql`\n        SELECT m.*, u.username, u.name_color, u.custom_title, u.has_gold_animation,\n               COALESCE(\n                 json_agg(\n                   json_build_object(\n                     'emoji', mr.emoji,\n                     'count', mr.reaction_count,\n                     'reacted_by_me', CASE WHEN mr.user_reacted THEN true ELSE false END\n                   )\n                 ) FILTER (WHERE mr.emoji IS NOT NULL), \n                 '[]'::json\n               ) as reactions,\n               pm.content AS parent_message_content,\n               pu.username AS parent_message_username\n        FROM messages m\n        JOIN users u ON m.sender_id = u.id\n        LEFT JOIN (\n          SELECT \n            message_id,\n            emoji,\n            COUNT(*) as reaction_count,\n            BOOL_OR(user_id = ${userId || null}) as user_reacted\n          FROM message_reactions\n          GROUP BY message_id, emoji\n        ) mr ON m.id = mr.message_id\n        LEFT JOIN messages pm ON m.parent_message_id = pm.id\n        LEFT JOIN users pu ON pm.sender_id = pu.id\n        WHERE m.chat_type = 'global'\n        GROUP BY m.id, u.username, u.name_color, u.custom_title, u.has_gold_animation, pm.content, pu.username\n        ORDER BY m.created_at DESC\n        LIMIT ${limit}\n      `;\n            return result.reverse();\n        } else if (chatType === \"dm\") {\n            const result = await sql`\n        SELECT m.*, u.username, u.name_color, u.custom_title, u.has_gold_animation,\n               COALESCE(\n                 json_agg(\n                   json_build_object(\n                     'emoji', mr.emoji,\n                     'count', mr.reaction_count,\n                     'reacted_by_me', CASE WHEN mr.user_reacted THEN true ELSE false END\n                   )\n                 ) FILTER (WHERE mr.emoji IS NOT NULL), \n                 '[]'::json\n               ) as reactions,\n               pm.content AS parent_message_content,\n               pu.username AS parent_message_username\n        FROM messages m\n        JOIN users u ON m.sender_id = u.id\n        LEFT JOIN (\n          SELECT \n            message_id,\n            emoji,\n            COUNT(*) as reaction_count,\n            BOOL_OR(user_id = ${userId || null}) as user_reacted\n          FROM message_reactions\n          GROUP BY message_id, emoji\n        ) mr ON m.id = mr.message_id\n        LEFT JOIN messages pm ON m.parent_message_id = pm.id\n        LEFT JOIN users pu ON pm.sender_id = pu.id\n        WHERE m.chat_type = 'dm' \n          AND ((m.sender_id = ${userId} AND m.chat_id = ${chatId}) \n               OR (m.sender_id = ${chatId} AND m.chat_id = ${userId}))\n        GROUP BY m.id, u.username, u.name_color, u.custom_title, u.has_gold_animation, pm.content, pu.username\n        ORDER BY m.created_at DESC\n        LIMIT ${limit}\n      `;\n            return result.reverse();\n        } else if (chatType === \"channel\") {\n            const result = await sql`\n        SELECT m.*, u.username, u.name_color, u.custom_title, u.has_gold_animation,\n               COALESCE(\n                 json_agg(\n                   json_build_object(\n                     'emoji', mr.emoji,\n                     'count', mr.reaction_count,\n                     'reacted_by_me', CASE WHEN mr.user_reacted THEN true ELSE false END\n                   )\n                 ) FILTER (WHERE mr.emoji IS NOT NULL), \n                 '[]'::json\n               ) as reactions,\n               pm.content AS parent_message_content,\n               pu.username AS parent_message_username\n        FROM messages m\n        JOIN users u ON m.sender_id = u.id\n        LEFT JOIN (\n          SELECT \n            message_id,\n            emoji,\n            COUNT(*) as reaction_count,\n            BOOL_OR(user_id = ${userId || null}) as user_reacted\n          FROM message_reactions\n          GROUP BY message_id, emoji\n        ) mr ON m.id = mr.message_id\n        LEFT JOIN messages pm ON m.parent_message_id = pm.id\n        LEFT JOIN users pu ON pm.sender_id = pu.id\n        WHERE m.chat_type = 'channel' AND m.chat_id = ${chatId}\n        GROUP BY m.id, u.username, u.name_color, u.custom_title, u.has_gold_animation, pm.content, pu.username\n        ORDER BY m.created_at DESC\n        LIMIT ${limit}\n      `;\n            return result.reverse();\n        } else {\n            const result = await sql`\n        SELECT m.*, u.username, u.name_color, u.custom_title, u.has_gold_animation,\n               COALESCE(\n                 json_agg(\n                   json_build_object(\n                     'emoji', mr.emoji,\n                     'count', mr.reaction_count,\n                     'reacted_by_me', CASE WHEN mr.user_reacted THEN true ELSE false END\n                   )\n                 ) FILTER (WHERE mr.emoji IS NOT NULL), \n                 '[]'::json\n               ) as reactions,\n               pm.content AS parent_message_content,\n               pu.username AS parent_message_username\n        FROM messages m\n        JOIN users u ON m.sender_id = u.id\n        LEFT JOIN (\n          SELECT \n            message_id,\n            emoji,\n            COUNT(*) as reaction_count,\n            BOOL_OR(user_id = ${userId || null}) as user_reacted\n          FROM message_reactions\n          GROUP BY message_id, emoji\n        ) mr ON m.id = mr.message_id\n        LEFT JOIN messages pm ON m.parent_message_id = pm.id\n        LEFT JOIN users pu ON pm.sender_id = pu.id\n        WHERE m.chat_type = ${chatType} AND m.chat_id = ${chatId}\n        GROUP BY m.id, u.username, u.name_color, u.custom_title, u.has_gold_animation, pm.content, pu.username\n        ORDER BY m.created_at DESC\n        LIMIT ${limit}\n      `;\n            return result.reverse();\n        }\n    } catch (err) {\n        console.error(\"[db] getMessages error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function createMessage(senderId, content, chatType, chatId, mentions = [], isAiResponse = false, parentMessageId, messageType = \"text\") {\n    try {\n        const result = await sql`\n      INSERT INTO messages (sender_id, content, chat_type, chat_id, mentions, is_ai_response, parent_message_id, message_type)\n      VALUES (${senderId}, ${content}, ${chatType}, ${chatId}, ${mentions}, ${isAiResponse}, ${parentMessageId}, ${messageType})\n      RETURNING *\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] createMessage error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function createGroupChat(name, creatorId, memberIds = []) {\n    try {\n        const result = await sql`\n      INSERT INTO group_chats (name, creator_id)\n      VALUES (${name}, ${creatorId})\n      RETURNING *\n    `;\n        await sql`\n      INSERT INTO group_chat_members (group_chat_id, user_id)\n      VALUES (${result[0].id}, ${creatorId})\n    `;\n        for (const memberId of memberIds){\n            if (memberId !== creatorId) {\n                await sql`\n          INSERT INTO group_chat_members (group_chat_id, user_id)\n          VALUES (${result[0].id}, ${memberId})\n          ON CONFLICT (group_chat_id, user_id) DO NOTHING\n        `;\n            }\n        }\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] createGroupChat error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function getUserGroupChats(userId) {\n    try {\n        const result = await sql`\n      SELECT gc.*, u.username as creator_username\n      FROM group_chats gc\n      JOIN group_chat_members gcm ON gc.id = gcm.group_chat_id\n      JOIN users u ON gc.creator_id = u.id\n      WHERE gcm.user_id = ${userId}\n      ORDER BY gc.updated_at DESC\n    `;\n        return result;\n    } catch (err) {\n        console.error(\"[db] getUserGroupChats error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function deleteGroupChat(groupId, creatorId) {\n    try {\n        const chat = await sql`SELECT creator_id FROM group_chats WHERE id = ${groupId}`;\n        if (!chat[0] || chat[0].creator_id !== creatorId) {\n            throw new Error(\"Unauthorized to delete this group chat.\");\n        }\n        await sql`BEGIN`;\n        await sql`DELETE FROM messages WHERE chat_type = 'group' AND chat_id = ${groupId}`;\n        await sql`DELETE FROM group_chat_members WHERE group_chat_id = ${groupId}`;\n        await sql`DELETE FROM group_chats WHERE id = ${groupId}`;\n        await sql`COMMIT`;\n        return true;\n    } catch (err) {\n        await sql`ROLLBACK`;\n        console.error(\"[db] deleteGroupChat error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function createFriendship(requesterId, addresseeId) {\n    try {\n        if (requesterId === addresseeId) {\n            throw new Error(\"Cannot send friend request to yourself.\");\n        }\n        const existing = await sql`\n      SELECT * FROM friendships\n      WHERE (requester_id = ${requesterId} AND addressee_id = ${addresseeId})\n         OR (requester_id = ${addresseeId} AND addressee_id = ${requesterId})\n      LIMIT 1\n    `;\n        if (existing.length > 0) {\n            if (existing[0].status === \"pending\") {\n                throw new Error(\"Friend request already pending.\");\n            } else if (existing[0].status === \"accepted\") {\n                throw new Error(\"Already friends with this user.\");\n            } else if (existing[0].status === \"blocked\") {\n                throw new Error(\"Cannot send request due to existing block.\");\n            }\n        }\n        const result = await sql`\n      INSERT INTO friendships (requester_id, addressee_id, status)\n      VALUES (${requesterId}, ${addresseeId}, 'pending')\n      RETURNING *\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] createFriendship error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function updateFriendshipStatus(friendshipId, status) {\n    try {\n        const result = await sql`\n      UPDATE friendships \n      SET status = ${status}, updated_at = NOW()\n      WHERE id = ${friendshipId}\n      RETURNING *\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] updateFriendshipStatus error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function getFriendships(userId) {\n    try {\n        const result = await sql`\n      SELECT f.*, \n             u1.username as requester_username,\n             u2.username as addressee_username,\n             u1.name_color as requester_name_color,\n             u2.name_color as addressee_name_color,\n             u1.has_gold_animation as requester_has_gold,\n             u2.has_gold_animation as addressee_has_gold\n      FROM friendships f\n      JOIN users u1 ON f.requester_id = u1.id\n      JOIN users u2 ON f.addressee_id = u2.id\n      WHERE (f.requester_id = ${userId} OR f.addressee_id = ${userId})\n      ORDER BY f.created_at DESC\n    `;\n        return result;\n    } catch (err) {\n        console.error(\"[db] getFriendships error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function getAcceptedFriends(userId) {\n    try {\n        const result = await sql`\n      SELECT DISTINCT\n        CASE \n          WHEN f.requester_id = ${userId} THEN u2.id\n          ELSE u1.id\n        END as friend_id,\n        CASE \n          WHEN f.requester_id = ${userId} THEN u2.username\n          ELSE u1.username\n        END as friend_username,\n        CASE \n          WHEN f.requester_id = ${userId} THEN u2.name_color\n          ELSE u1.name_color\n        END as friend_name_color,\n        CASE \n          WHEN f.requester_id = ${userId} THEN u2.has_gold_animation\n          ELSE u1.has_gold_animation\n        END as friend_has_gold\n      FROM friendships f\n      JOIN users u1 ON f.requester_id = u1.id\n      JOIN users u2 ON f.addressee_id = u2.id\n      WHERE (f.requester_id = ${userId} OR f.addressee_id = ${userId})\n      AND f.status = 'accepted'\n      ORDER BY friend_username\n    `;\n        return result;\n    } catch (err) {\n        console.error(\"[db] getAcceptedFriends error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function getUserDMs(userId) {\n    try {\n        const result = await sql`\n      SELECT DISTINCT\n        CASE\n          WHEN m.sender_id = ${userId} THEN m.chat_id\n          ELSE m.sender_id\n        END as friend_id,\n        u.username as friend_username,\n        u.name_color as friend_name_color,\n        u.has_gold_animation as friend_has_gold,\n        MAX(m.created_at) as last_message_at\n      FROM messages m\n      JOIN users u ON \n        CASE\n          WHEN m.sender_id = ${userId} THEN m.chat_id\n          ELSE m.sender_id\n        END = u.id\n      WHERE m.chat_type = 'dm' \n      AND (m.sender_id = ${userId} OR m.chat_id = ${userId})\n      AND u.id != ${userId}\n      AND u.id != ${_lib_constants__WEBPACK_IMPORTED_MODULE_2__.AI_USER_ID}\n      GROUP BY friend_id, u.username, u.name_color, u.has_gold_animation\n      ORDER BY last_message_at DESC\n    `;\n        return result;\n    } catch (err) {\n        console.error(\"[db] getUserDMs error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function createNotification(userId, title, message, chatType, chatId, senderUsername) {\n    try {\n        const result = await sql`\n      INSERT INTO notifications (user_id, title, message, chat_type, chat_id, sender_username)\n      VALUES (${userId}, ${title}, ${message}, ${chatType}, ${chatId}, ${senderUsername})\n      RETURNING *\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] createNotification error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function getUnreadNotifications(userId) {\n    try {\n        const result = await sql`\n      SELECT * FROM notifications\n      WHERE user_id = ${userId} AND is_read = FALSE\n      ORDER BY created_at DESC\n    `;\n        return result;\n    } catch (err) {\n        console.error(\"[db] getUnreadNotifications error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function markNotificationAsRead(notificationId, userId) {\n    try {\n        const result = await sql`\n      UPDATE notifications\n      SET is_read = TRUE, created_at = NOW()\n      WHERE id = ${notificationId} AND user_id = ${userId}\n      RETURNING *\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] markNotificationAsRead error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function addMessageReaction(messageId, userId, emoji) {\n    try {\n        const result = await sql`\n      INSERT INTO message_reactions (message_id, user_id, emoji)\n      VALUES (${messageId}, ${userId}, ${emoji})\n      ON CONFLICT (message_id, user_id, emoji) DO NOTHING\n      RETURNING *\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] addMessageReaction error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function removeMessageReaction(messageId, userId, emoji) {\n    try {\n        await sql`\n      DELETE FROM message_reactions\n      WHERE message_id = ${messageId}\n        AND user_id   = ${userId}\n        AND emoji     = ${emoji}\n    `;\n        return true;\n    } catch (err) {\n        console.error(\"[db] removeMessageReaction error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function updateUserSettings(userId, updates) {\n    try {\n        const allowedFields = [\n            \"name_color\",\n            \"notifications_enabled\",\n            \"theme\",\n            \"hue\",\n            \"ui_mode\"\n        ];\n        const validUpdates = {};\n        for (const [key, value] of Object.entries(updates)){\n            if (allowedFields.includes(key)) {\n                validUpdates[key] = value;\n            }\n        }\n        if (Object.keys(validUpdates).length === 0) {\n            throw new Error(\"No valid fields to update\");\n        }\n        const setClause = Object.keys(validUpdates).map((key, index)=>`${key} = $${index + 2}`).join(\", \");\n        const queryString = `\n      UPDATE users \n      SET ${setClause}, updated_at = NOW()\n      WHERE id = $1\n      RETURNING id, username, email, signup_code, name_color, custom_title, has_gold_animation, notifications_enabled, theme, hue, profile_picture, bio, ui_mode\n    `;\n        const params = [\n            userId,\n            ...Object.values(validUpdates)\n        ];\n        const result = await sql.unsafe(queryString, params);\n        if (!result || result.length === 0) {\n            throw new Error(\"User not found or no settings updated.\");\n        }\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] updateUserSettings error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\n// Freeze feature\nasync function setUserFrozen(targetUserId, frozenByUserId, message) {\n    try {\n        const result = await sql`\n      UPDATE users\n      SET is_frozen = TRUE, frozen_by = ${frozenByUserId}, freeze_message = ${message || null}, updated_at = NOW()\n      WHERE id = ${targetUserId}\n      RETURNING id, is_frozen, frozen_by, freeze_message\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] setUserFrozen error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function clearUserFrozen(targetUserId) {\n    try {\n        const result = await sql`\n      UPDATE users\n      SET is_frozen = FALSE, frozen_by = NULL, freeze_message = NULL, updated_at = NOW()\n      WHERE id = ${targetUserId}\n      RETURNING id, is_frozen, frozen_by, freeze_message\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] clearUserFrozen error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function getUserFreezeStatus(userId) {\n    try {\n        const result = await sql`\n      SELECT is_frozen, frozen_by, freeze_message FROM users WHERE id = ${userId}\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] getUserFreezeStatus error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./lib/db.ts\n");

/***/ }),

/***/ "(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib sync recursive":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/ sync ***!
  \****************************************************************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib sync recursive";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/database.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/database.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"buffer\")[\"Buffer\"];\n\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst util = __webpack_require__(/*! ./util */ \"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/util.js\");\nconst SqliteError = __webpack_require__(/*! ./sqlite-error */ \"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/sqlite-error.js\");\n\nlet DEFAULT_ADDON;\n\nfunction Database(filenameGiven, options) {\n\tif (new.target == null) {\n\t\treturn new Database(filenameGiven, options);\n\t}\n\n\t// Apply defaults\n\tlet buffer;\n\tif (Buffer.isBuffer(filenameGiven)) {\n\t\tbuffer = filenameGiven;\n\t\tfilenameGiven = ':memory:';\n\t}\n\tif (filenameGiven == null) filenameGiven = '';\n\tif (options == null) options = {};\n\n\t// Validate arguments\n\tif (typeof filenameGiven !== 'string') throw new TypeError('Expected first argument to be a string');\n\tif (typeof options !== 'object') throw new TypeError('Expected second argument to be an options object');\n\tif ('readOnly' in options) throw new TypeError('Misspelled option \"readOnly\" should be \"readonly\"');\n\tif ('memory' in options) throw new TypeError('Option \"memory\" was removed in v7.0.0 (use \":memory:\" filename instead)');\n\n\t// Interpret options\n\tconst filename = filenameGiven.trim();\n\tconst anonymous = filename === '' || filename === ':memory:';\n\tconst readonly = util.getBooleanOption(options, 'readonly');\n\tconst fileMustExist = util.getBooleanOption(options, 'fileMustExist');\n\tconst timeout = 'timeout' in options ? options.timeout : 5000;\n\tconst verbose = 'verbose' in options ? options.verbose : null;\n\tconst nativeBinding = 'nativeBinding' in options ? options.nativeBinding : null;\n\n\t// Validate interpreted options\n\tif (readonly && anonymous && !buffer) throw new TypeError('In-memory/temporary databases cannot be readonly');\n\tif (!Number.isInteger(timeout) || timeout < 0) throw new TypeError('Expected the \"timeout\" option to be a positive integer');\n\tif (timeout > 0x7fffffff) throw new RangeError('Option \"timeout\" cannot be greater than 2147483647');\n\tif (verbose != null && typeof verbose !== 'function') throw new TypeError('Expected the \"verbose\" option to be a function');\n\tif (nativeBinding != null && typeof nativeBinding !== 'string' && typeof nativeBinding !== 'object') throw new TypeError('Expected the \"nativeBinding\" option to be a string or addon object');\n\n\t// Load the native addon\n\tlet addon;\n\tif (nativeBinding == null) {\n\t\taddon = DEFAULT_ADDON || (DEFAULT_ADDON = __webpack_require__(/*! bindings */ \"(middleware)/./node_modules/.pnpm/bindings@1.5.0/node_modules/bindings/bindings.js\")('better_sqlite3.node'));\n\t} else if (typeof nativeBinding === 'string') {\n\t\t// See <https://webpack.js.org/api/module-variables/#__non_webpack_require__-webpack-specific>\n\t\tconst requireFunc = typeof require === 'function' ? require : __webpack_require__(\"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib sync recursive\");\n\t\taddon = requireFunc(path.resolve(nativeBinding).replace(/(\\.node)?$/, '.node'));\n\t} else {\n\t\t// See <https://github.com/WiseLibs/better-sqlite3/issues/972>\n\t\taddon = nativeBinding;\n\t}\n\n\tif (!addon.isInitialized) {\n\t\taddon.setErrorConstructor(SqliteError);\n\t\taddon.isInitialized = true;\n\t}\n\n\t// Make sure the specified directory exists\n\tif (!anonymous && !fs.existsSync(path.dirname(filename))) {\n\t\tthrow new TypeError('Cannot open database because the directory does not exist');\n\t}\n\n\tObject.defineProperties(this, {\n\t\t[util.cppdb]: { value: new addon.Database(filename, filenameGiven, anonymous, readonly, fileMustExist, timeout, verbose || null, buffer || null) },\n\t\t...wrappers.getters,\n\t});\n}\n\nconst wrappers = __webpack_require__(/*! ./methods/wrappers */ \"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/wrappers.js\");\nDatabase.prototype.prepare = wrappers.prepare;\nDatabase.prototype.transaction = __webpack_require__(/*! ./methods/transaction */ \"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/transaction.js\");\nDatabase.prototype.pragma = __webpack_require__(/*! ./methods/pragma */ \"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/pragma.js\");\nDatabase.prototype.backup = __webpack_require__(/*! ./methods/backup */ \"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/backup.js\");\nDatabase.prototype.serialize = __webpack_require__(/*! ./methods/serialize */ \"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/serialize.js\");\nDatabase.prototype.function = __webpack_require__(/*! ./methods/function */ \"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/function.js\");\nDatabase.prototype.aggregate = __webpack_require__(/*! ./methods/aggregate */ \"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/aggregate.js\");\nDatabase.prototype.table = __webpack_require__(/*! ./methods/table */ \"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/table.js\");\nDatabase.prototype.loadExtension = wrappers.loadExtension;\nDatabase.prototype.exec = wrappers.exec;\nDatabase.prototype.close = wrappers.close;\nDatabase.prototype.defaultSafeIntegers = wrappers.defaultSafeIntegers;\nDatabase.prototype.unsafeMode = wrappers.unsafeMode;\nDatabase.prototype[util.inspect] = __webpack_require__(/*! ./methods/inspect */ \"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/inspect.js\");\n\nmodule.exports = Database;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDEyLjIuMC9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL2RhdGFiYXNlLmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiLFdBQVcsbUJBQU8sQ0FBQyxjQUFJO0FBQ3ZCLGFBQWEsbUJBQU8sQ0FBQyxrQkFBTTtBQUMzQixhQUFhLG1CQUFPLENBQUMsK0dBQVE7QUFDN0Isb0JBQW9CLG1CQUFPLENBQUMsK0hBQWdCOztBQUU1Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSyxNQUFNO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxtQkFBTyxDQUFDLG9HQUFVO0FBQzlELEdBQUc7QUFDSDtBQUNBLDZCQUE2QixPQUF1QixrQkFBa0IsT0FBdUIsR0FBRyw2SEFBTztBQUN2RztBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0Isa0lBQWtJO0FBQ3BKO0FBQ0EsRUFBRTtBQUNGOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLHVJQUFvQjtBQUM3QztBQUNBLGlDQUFpQyxtQkFBTyxDQUFDLDZJQUF1QjtBQUNoRSw0QkFBNEIsbUJBQU8sQ0FBQyxtSUFBa0I7QUFDdEQsNEJBQTRCLG1CQUFPLENBQUMsbUlBQWtCO0FBQ3RELCtCQUErQixtQkFBTyxDQUFDLHlJQUFxQjtBQUM1RCw4QkFBOEIsbUJBQU8sQ0FBQyx1SUFBb0I7QUFDMUQsK0JBQStCLG1CQUFPLENBQUMseUlBQXFCO0FBQzVELDJCQUEyQixtQkFBTyxDQUFDLGlJQUFpQjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLG1CQUFPLENBQUMscUlBQW1COztBQUU5RCIsInNvdXJjZXMiOlsiL1VzZXJzL3JvaGFuL2NvZGUvcmVhbHRhbGsvbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDEyLjIuMC9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL2RhdGFiYXNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5jb25zdCBTcWxpdGVFcnJvciA9IHJlcXVpcmUoJy4vc3FsaXRlLWVycm9yJyk7XG5cbmxldCBERUZBVUxUX0FERE9OO1xuXG5mdW5jdGlvbiBEYXRhYmFzZShmaWxlbmFtZUdpdmVuLCBvcHRpb25zKSB7XG5cdGlmIChuZXcudGFyZ2V0ID09IG51bGwpIHtcblx0XHRyZXR1cm4gbmV3IERhdGFiYXNlKGZpbGVuYW1lR2l2ZW4sIG9wdGlvbnMpO1xuXHR9XG5cblx0Ly8gQXBwbHkgZGVmYXVsdHNcblx0bGV0IGJ1ZmZlcjtcblx0aWYgKEJ1ZmZlci5pc0J1ZmZlcihmaWxlbmFtZUdpdmVuKSkge1xuXHRcdGJ1ZmZlciA9IGZpbGVuYW1lR2l2ZW47XG5cdFx0ZmlsZW5hbWVHaXZlbiA9ICc6bWVtb3J5Oic7XG5cdH1cblx0aWYgKGZpbGVuYW1lR2l2ZW4gPT0gbnVsbCkgZmlsZW5hbWVHaXZlbiA9ICcnO1xuXHRpZiAob3B0aW9ucyA9PSBudWxsKSBvcHRpb25zID0ge307XG5cblx0Ly8gVmFsaWRhdGUgYXJndW1lbnRzXG5cdGlmICh0eXBlb2YgZmlsZW5hbWVHaXZlbiAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGEgc3RyaW5nJyk7XG5cdGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHNlY29uZCBhcmd1bWVudCB0byBiZSBhbiBvcHRpb25zIG9iamVjdCcpO1xuXHRpZiAoJ3JlYWRPbmx5JyBpbiBvcHRpb25zKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdNaXNzcGVsbGVkIG9wdGlvbiBcInJlYWRPbmx5XCIgc2hvdWxkIGJlIFwicmVhZG9ubHlcIicpO1xuXHRpZiAoJ21lbW9yeScgaW4gb3B0aW9ucykgdGhyb3cgbmV3IFR5cGVFcnJvcignT3B0aW9uIFwibWVtb3J5XCIgd2FzIHJlbW92ZWQgaW4gdjcuMC4wICh1c2UgXCI6bWVtb3J5OlwiIGZpbGVuYW1lIGluc3RlYWQpJyk7XG5cblx0Ly8gSW50ZXJwcmV0IG9wdGlvbnNcblx0Y29uc3QgZmlsZW5hbWUgPSBmaWxlbmFtZUdpdmVuLnRyaW0oKTtcblx0Y29uc3QgYW5vbnltb3VzID0gZmlsZW5hbWUgPT09ICcnIHx8IGZpbGVuYW1lID09PSAnOm1lbW9yeTonO1xuXHRjb25zdCByZWFkb25seSA9IHV0aWwuZ2V0Qm9vbGVhbk9wdGlvbihvcHRpb25zLCAncmVhZG9ubHknKTtcblx0Y29uc3QgZmlsZU11c3RFeGlzdCA9IHV0aWwuZ2V0Qm9vbGVhbk9wdGlvbihvcHRpb25zLCAnZmlsZU11c3RFeGlzdCcpO1xuXHRjb25zdCB0aW1lb3V0ID0gJ3RpbWVvdXQnIGluIG9wdGlvbnMgPyBvcHRpb25zLnRpbWVvdXQgOiA1MDAwO1xuXHRjb25zdCB2ZXJib3NlID0gJ3ZlcmJvc2UnIGluIG9wdGlvbnMgPyBvcHRpb25zLnZlcmJvc2UgOiBudWxsO1xuXHRjb25zdCBuYXRpdmVCaW5kaW5nID0gJ25hdGl2ZUJpbmRpbmcnIGluIG9wdGlvbnMgPyBvcHRpb25zLm5hdGl2ZUJpbmRpbmcgOiBudWxsO1xuXG5cdC8vIFZhbGlkYXRlIGludGVycHJldGVkIG9wdGlvbnNcblx0aWYgKHJlYWRvbmx5ICYmIGFub255bW91cyAmJiAhYnVmZmVyKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbi1tZW1vcnkvdGVtcG9yYXJ5IGRhdGFiYXNlcyBjYW5ub3QgYmUgcmVhZG9ubHknKTtcblx0aWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHRpbWVvdXQpIHx8IHRpbWVvdXQgPCAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgXCJ0aW1lb3V0XCIgb3B0aW9uIHRvIGJlIGEgcG9zaXRpdmUgaW50ZWdlcicpO1xuXHRpZiAodGltZW91dCA+IDB4N2ZmZmZmZmYpIHRocm93IG5ldyBSYW5nZUVycm9yKCdPcHRpb24gXCJ0aW1lb3V0XCIgY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiAyMTQ3NDgzNjQ3Jyk7XG5cdGlmICh2ZXJib3NlICE9IG51bGwgJiYgdHlwZW9mIHZlcmJvc2UgIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBcInZlcmJvc2VcIiBvcHRpb24gdG8gYmUgYSBmdW5jdGlvbicpO1xuXHRpZiAobmF0aXZlQmluZGluZyAhPSBudWxsICYmIHR5cGVvZiBuYXRpdmVCaW5kaW5nICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgbmF0aXZlQmluZGluZyAhPT0gJ29iamVjdCcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBcIm5hdGl2ZUJpbmRpbmdcIiBvcHRpb24gdG8gYmUgYSBzdHJpbmcgb3IgYWRkb24gb2JqZWN0Jyk7XG5cblx0Ly8gTG9hZCB0aGUgbmF0aXZlIGFkZG9uXG5cdGxldCBhZGRvbjtcblx0aWYgKG5hdGl2ZUJpbmRpbmcgPT0gbnVsbCkge1xuXHRcdGFkZG9uID0gREVGQVVMVF9BRERPTiB8fCAoREVGQVVMVF9BRERPTiA9IHJlcXVpcmUoJ2JpbmRpbmdzJykoJ2JldHRlcl9zcWxpdGUzLm5vZGUnKSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG5hdGl2ZUJpbmRpbmcgPT09ICdzdHJpbmcnKSB7XG5cdFx0Ly8gU2VlIDxodHRwczovL3dlYnBhY2suanMub3JnL2FwaS9tb2R1bGUtdmFyaWFibGVzLyNfX25vbl93ZWJwYWNrX3JlcXVpcmVfXy13ZWJwYWNrLXNwZWNpZmljPlxuXHRcdGNvbnN0IHJlcXVpcmVGdW5jID0gdHlwZW9mIF9fbm9uX3dlYnBhY2tfcmVxdWlyZV9fID09PSAnZnVuY3Rpb24nID8gX19ub25fd2VicGFja19yZXF1aXJlX18gOiByZXF1aXJlO1xuXHRcdGFkZG9uID0gcmVxdWlyZUZ1bmMocGF0aC5yZXNvbHZlKG5hdGl2ZUJpbmRpbmcpLnJlcGxhY2UoLyhcXC5ub2RlKT8kLywgJy5ub2RlJykpO1xuXHR9IGVsc2Uge1xuXHRcdC8vIFNlZSA8aHR0cHM6Ly9naXRodWIuY29tL1dpc2VMaWJzL2JldHRlci1zcWxpdGUzL2lzc3Vlcy85NzI+XG5cdFx0YWRkb24gPSBuYXRpdmVCaW5kaW5nO1xuXHR9XG5cblx0aWYgKCFhZGRvbi5pc0luaXRpYWxpemVkKSB7XG5cdFx0YWRkb24uc2V0RXJyb3JDb25zdHJ1Y3RvcihTcWxpdGVFcnJvcik7XG5cdFx0YWRkb24uaXNJbml0aWFsaXplZCA9IHRydWU7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhlIHNwZWNpZmllZCBkaXJlY3RvcnkgZXhpc3RzXG5cdGlmICghYW5vbnltb3VzICYmICFmcy5leGlzdHNTeW5jKHBhdGguZGlybmFtZShmaWxlbmFtZSkpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IG9wZW4gZGF0YWJhc2UgYmVjYXVzZSB0aGUgZGlyZWN0b3J5IGRvZXMgbm90IGV4aXN0Jyk7XG5cdH1cblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG5cdFx0W3V0aWwuY3BwZGJdOiB7IHZhbHVlOiBuZXcgYWRkb24uRGF0YWJhc2UoZmlsZW5hbWUsIGZpbGVuYW1lR2l2ZW4sIGFub255bW91cywgcmVhZG9ubHksIGZpbGVNdXN0RXhpc3QsIHRpbWVvdXQsIHZlcmJvc2UgfHwgbnVsbCwgYnVmZmVyIHx8IG51bGwpIH0sXG5cdFx0Li4ud3JhcHBlcnMuZ2V0dGVycyxcblx0fSk7XG59XG5cbmNvbnN0IHdyYXBwZXJzID0gcmVxdWlyZSgnLi9tZXRob2RzL3dyYXBwZXJzJyk7XG5EYXRhYmFzZS5wcm90b3R5cGUucHJlcGFyZSA9IHdyYXBwZXJzLnByZXBhcmU7XG5EYXRhYmFzZS5wcm90b3R5cGUudHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL21ldGhvZHMvdHJhbnNhY3Rpb24nKTtcbkRhdGFiYXNlLnByb3RvdHlwZS5wcmFnbWEgPSByZXF1aXJlKCcuL21ldGhvZHMvcHJhZ21hJyk7XG5EYXRhYmFzZS5wcm90b3R5cGUuYmFja3VwID0gcmVxdWlyZSgnLi9tZXRob2RzL2JhY2t1cCcpO1xuRGF0YWJhc2UucHJvdG90eXBlLnNlcmlhbGl6ZSA9IHJlcXVpcmUoJy4vbWV0aG9kcy9zZXJpYWxpemUnKTtcbkRhdGFiYXNlLnByb3RvdHlwZS5mdW5jdGlvbiA9IHJlcXVpcmUoJy4vbWV0aG9kcy9mdW5jdGlvbicpO1xuRGF0YWJhc2UucHJvdG90eXBlLmFnZ3JlZ2F0ZSA9IHJlcXVpcmUoJy4vbWV0aG9kcy9hZ2dyZWdhdGUnKTtcbkRhdGFiYXNlLnByb3RvdHlwZS50YWJsZSA9IHJlcXVpcmUoJy4vbWV0aG9kcy90YWJsZScpO1xuRGF0YWJhc2UucHJvdG90eXBlLmxvYWRFeHRlbnNpb24gPSB3cmFwcGVycy5sb2FkRXh0ZW5zaW9uO1xuRGF0YWJhc2UucHJvdG90eXBlLmV4ZWMgPSB3cmFwcGVycy5leGVjO1xuRGF0YWJhc2UucHJvdG90eXBlLmNsb3NlID0gd3JhcHBlcnMuY2xvc2U7XG5EYXRhYmFzZS5wcm90b3R5cGUuZGVmYXVsdFNhZmVJbnRlZ2VycyA9IHdyYXBwZXJzLmRlZmF1bHRTYWZlSW50ZWdlcnM7XG5EYXRhYmFzZS5wcm90b3R5cGUudW5zYWZlTW9kZSA9IHdyYXBwZXJzLnVuc2FmZU1vZGU7XG5EYXRhYmFzZS5wcm90b3R5cGVbdXRpbC5pbnNwZWN0XSA9IHJlcXVpcmUoJy4vbWV0aG9kcy9pbnNwZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YWJhc2U7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/database.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/index.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/index.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ./database */ \"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/database.js\");\nmodule.exports.SqliteError = __webpack_require__(/*! ./sqlite-error */ \"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/sqlite-error.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDEyLjIuMC9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsNkpBQXNDO0FBQ3RDLGlMQUFzRCIsInNvdXJjZXMiOlsiL1VzZXJzL3JvaGFuL2NvZGUvcmVhbHRhbGsvbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDEyLjIuMC9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kYXRhYmFzZScpO1xubW9kdWxlLmV4cG9ydHMuU3FsaXRlRXJyb3IgPSByZXF1aXJlKCcuL3NxbGl0ZS1lcnJvcicpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/index.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/aggregate.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/aggregate.js ***!
  \*******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { getBooleanOption, cppdb } = __webpack_require__(/*! ../util */ \"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/util.js\");\n\nmodule.exports = function defineAggregate(name, options) {\n\t// Validate arguments\n\tif (typeof name !== 'string') throw new TypeError('Expected first argument to be a string');\n\tif (typeof options !== 'object' || options === null) throw new TypeError('Expected second argument to be an options object');\n\tif (!name) throw new TypeError('User-defined function name cannot be an empty string');\n\n\t// Interpret options\n\tconst start = 'start' in options ? options.start : null;\n\tconst step = getFunctionOption(options, 'step', true);\n\tconst inverse = getFunctionOption(options, 'inverse', false);\n\tconst result = getFunctionOption(options, 'result', false);\n\tconst safeIntegers = 'safeIntegers' in options ? +getBooleanOption(options, 'safeIntegers') : 2;\n\tconst deterministic = getBooleanOption(options, 'deterministic');\n\tconst directOnly = getBooleanOption(options, 'directOnly');\n\tconst varargs = getBooleanOption(options, 'varargs');\n\tlet argCount = -1;\n\n\t// Determine argument count\n\tif (!varargs) {\n\t\targCount = Math.max(getLength(step), inverse ? getLength(inverse) : 0);\n\t\tif (argCount > 0) argCount -= 1;\n\t\tif (argCount > 100) throw new RangeError('User-defined functions cannot have more than 100 arguments');\n\t}\n\n\tthis[cppdb].aggregate(start, step, inverse, result, name, argCount, safeIntegers, deterministic, directOnly);\n\treturn this;\n};\n\nconst getFunctionOption = (options, key, required) => {\n\tconst value = key in options ? options[key] : null;\n\tif (typeof value === 'function') return value;\n\tif (value != null) throw new TypeError(`Expected the \"${key}\" option to be a function`);\n\tif (required) throw new TypeError(`Missing required option \"${key}\"`);\n\treturn null;\n};\n\nconst getLength = ({ length }) => {\n\tif (Number.isInteger(length) && length >= 0) return length;\n\tthrow new TypeError('Expected function.length to be a positive integer');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDEyLjIuMC9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL21ldGhvZHMvYWdncmVnYXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsUUFBUSwwQkFBMEIsRUFBRSxtQkFBTyxDQUFDLGdIQUFTOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseURBQXlELElBQUk7QUFDN0QsK0RBQStELElBQUk7QUFDbkU7QUFDQTs7QUFFQSxxQkFBcUIsUUFBUTtBQUM3QjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yb2hhbi9jb2RlL3JlYWx0YWxrL25vZGVfbW9kdWxlcy8ucG5wbS9iZXR0ZXItc3FsaXRlM0AxMi4yLjAvbm9kZV9tb2R1bGVzL2JldHRlci1zcWxpdGUzL2xpYi9tZXRob2RzL2FnZ3JlZ2F0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCB7IGdldEJvb2xlYW5PcHRpb24sIGNwcGRiIH0gPSByZXF1aXJlKCcuLi91dGlsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmaW5lQWdncmVnYXRlKG5hbWUsIG9wdGlvbnMpIHtcblx0Ly8gVmFsaWRhdGUgYXJndW1lbnRzXG5cdGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGEgc3RyaW5nJyk7XG5cdGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcgfHwgb3B0aW9ucyA9PT0gbnVsbCkgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgc2Vjb25kIGFyZ3VtZW50IHRvIGJlIGFuIG9wdGlvbnMgb2JqZWN0Jyk7XG5cdGlmICghbmFtZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVXNlci1kZWZpbmVkIGZ1bmN0aW9uIG5hbWUgY2Fubm90IGJlIGFuIGVtcHR5IHN0cmluZycpO1xuXG5cdC8vIEludGVycHJldCBvcHRpb25zXG5cdGNvbnN0IHN0YXJ0ID0gJ3N0YXJ0JyBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGFydCA6IG51bGw7XG5cdGNvbnN0IHN0ZXAgPSBnZXRGdW5jdGlvbk9wdGlvbihvcHRpb25zLCAnc3RlcCcsIHRydWUpO1xuXHRjb25zdCBpbnZlcnNlID0gZ2V0RnVuY3Rpb25PcHRpb24ob3B0aW9ucywgJ2ludmVyc2UnLCBmYWxzZSk7XG5cdGNvbnN0IHJlc3VsdCA9IGdldEZ1bmN0aW9uT3B0aW9uKG9wdGlvbnMsICdyZXN1bHQnLCBmYWxzZSk7XG5cdGNvbnN0IHNhZmVJbnRlZ2VycyA9ICdzYWZlSW50ZWdlcnMnIGluIG9wdGlvbnMgPyArZ2V0Qm9vbGVhbk9wdGlvbihvcHRpb25zLCAnc2FmZUludGVnZXJzJykgOiAyO1xuXHRjb25zdCBkZXRlcm1pbmlzdGljID0gZ2V0Qm9vbGVhbk9wdGlvbihvcHRpb25zLCAnZGV0ZXJtaW5pc3RpYycpO1xuXHRjb25zdCBkaXJlY3RPbmx5ID0gZ2V0Qm9vbGVhbk9wdGlvbihvcHRpb25zLCAnZGlyZWN0T25seScpO1xuXHRjb25zdCB2YXJhcmdzID0gZ2V0Qm9vbGVhbk9wdGlvbihvcHRpb25zLCAndmFyYXJncycpO1xuXHRsZXQgYXJnQ291bnQgPSAtMTtcblxuXHQvLyBEZXRlcm1pbmUgYXJndW1lbnQgY291bnRcblx0aWYgKCF2YXJhcmdzKSB7XG5cdFx0YXJnQ291bnQgPSBNYXRoLm1heChnZXRMZW5ndGgoc3RlcCksIGludmVyc2UgPyBnZXRMZW5ndGgoaW52ZXJzZSkgOiAwKTtcblx0XHRpZiAoYXJnQ291bnQgPiAwKSBhcmdDb3VudCAtPSAxO1xuXHRcdGlmIChhcmdDb3VudCA+IDEwMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1VzZXItZGVmaW5lZCBmdW5jdGlvbnMgY2Fubm90IGhhdmUgbW9yZSB0aGFuIDEwMCBhcmd1bWVudHMnKTtcblx0fVxuXG5cdHRoaXNbY3BwZGJdLmFnZ3JlZ2F0ZShzdGFydCwgc3RlcCwgaW52ZXJzZSwgcmVzdWx0LCBuYW1lLCBhcmdDb3VudCwgc2FmZUludGVnZXJzLCBkZXRlcm1pbmlzdGljLCBkaXJlY3RPbmx5KTtcblx0cmV0dXJuIHRoaXM7XG59O1xuXG5jb25zdCBnZXRGdW5jdGlvbk9wdGlvbiA9IChvcHRpb25zLCBrZXksIHJlcXVpcmVkKSA9PiB7XG5cdGNvbnN0IHZhbHVlID0ga2V5IGluIG9wdGlvbnMgPyBvcHRpb25zW2tleV0gOiBudWxsO1xuXHRpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdmFsdWU7XG5cdGlmICh2YWx1ZSAhPSBudWxsKSB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCB0aGUgXCIke2tleX1cIiBvcHRpb24gdG8gYmUgYSBmdW5jdGlvbmApO1xuXHRpZiAocmVxdWlyZWQpIHRocm93IG5ldyBUeXBlRXJyb3IoYE1pc3NpbmcgcmVxdWlyZWQgb3B0aW9uIFwiJHtrZXl9XCJgKTtcblx0cmV0dXJuIG51bGw7XG59O1xuXG5jb25zdCBnZXRMZW5ndGggPSAoeyBsZW5ndGggfSkgPT4ge1xuXHRpZiAoTnVtYmVyLmlzSW50ZWdlcihsZW5ndGgpICYmIGxlbmd0aCA+PSAwKSByZXR1cm4gbGVuZ3RoO1xuXHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBmdW5jdGlvbi5sZW5ndGggdG8gYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyJyk7XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/aggregate.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/backup.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/backup.js ***!
  \****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst { cppdb } = __webpack_require__(/*! ../util */ \"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/util.js\");\nconst fsAccess = promisify(fs.access);\n\nmodule.exports = async function backup(filename, options) {\n\tif (options == null) options = {};\n\n\t// Validate arguments\n\tif (typeof filename !== 'string') throw new TypeError('Expected first argument to be a string');\n\tif (typeof options !== 'object') throw new TypeError('Expected second argument to be an options object');\n\n\t// Interpret options\n\tfilename = filename.trim();\n\tconst attachedName = 'attached' in options ? options.attached : 'main';\n\tconst handler = 'progress' in options ? options.progress : null;\n\n\t// Validate interpreted options\n\tif (!filename) throw new TypeError('Backup filename cannot be an empty string');\n\tif (filename === ':memory:') throw new TypeError('Invalid backup filename \":memory:\"');\n\tif (typeof attachedName !== 'string') throw new TypeError('Expected the \"attached\" option to be a string');\n\tif (!attachedName) throw new TypeError('The \"attached\" option cannot be an empty string');\n\tif (handler != null && typeof handler !== 'function') throw new TypeError('Expected the \"progress\" option to be a function');\n\n\t// Make sure the specified directory exists\n\tawait fsAccess(path.dirname(filename)).catch(() => {\n\t\tthrow new TypeError('Cannot save backup because the directory does not exist');\n\t});\n\n\tconst isNewFile = await fsAccess(filename).then(() => false, () => true);\n\treturn runBackup(this[cppdb].backup(this, attachedName, filename, isNewFile), handler || null);\n};\n\nconst runBackup = (backup, handler) => {\n\tlet rate = 0;\n\tlet useDefault = true;\n\n\treturn new Promise((resolve, reject) => {\n\t\tsetImmediate(function step() {\n\t\t\ttry {\n\t\t\t\tconst progress = backup.transfer(rate);\n\t\t\t\tif (!progress.remainingPages) {\n\t\t\t\t\tbackup.close();\n\t\t\t\t\tresolve(progress);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (useDefault) {\n\t\t\t\t\tuseDefault = false;\n\t\t\t\t\trate = 100;\n\t\t\t\t}\n\t\t\t\tif (handler) {\n\t\t\t\t\tconst ret = handler(progress);\n\t\t\t\t\tif (ret !== undefined) {\n\t\t\t\t\t\tif (typeof ret === 'number' && ret === ret) rate = Math.max(0, Math.min(0x7fffffff, Math.round(ret)));\n\t\t\t\t\t\telse throw new TypeError('Expected progress callback to return a number or undefined');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsetImmediate(step);\n\t\t\t} catch (err) {\n\t\t\t\tbackup.close();\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t});\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDEyLjIuMC9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL21ldGhvZHMvYmFja3VwLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsV0FBVyxtQkFBTyxDQUFDLGNBQUk7QUFDdkIsYUFBYSxtQkFBTyxDQUFDLGtCQUFNO0FBQzNCLFFBQVEsWUFBWSxFQUFFLG1CQUFPLENBQUMsa0JBQU07QUFDcEMsUUFBUSxRQUFRLEVBQUUsbUJBQU8sQ0FBQyxnSEFBUztBQUNuQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvcm9oYW4vY29kZS9yZWFsdGFsay9ub2RlX21vZHVsZXMvLnBucG0vYmV0dGVyLXNxbGl0ZTNAMTIuMi4wL25vZGVfbW9kdWxlcy9iZXR0ZXItc3FsaXRlMy9saWIvbWV0aG9kcy9iYWNrdXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgcHJvbWlzaWZ5IH0gPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCB7IGNwcGRiIH0gPSByZXF1aXJlKCcuLi91dGlsJyk7XG5jb25zdCBmc0FjY2VzcyA9IHByb21pc2lmeShmcy5hY2Nlc3MpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIGZ1bmN0aW9uIGJhY2t1cChmaWxlbmFtZSwgb3B0aW9ucykge1xuXHRpZiAob3B0aW9ucyA9PSBudWxsKSBvcHRpb25zID0ge307XG5cblx0Ly8gVmFsaWRhdGUgYXJndW1lbnRzXG5cdGlmICh0eXBlb2YgZmlsZW5hbWUgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBmaXJzdCBhcmd1bWVudCB0byBiZSBhIHN0cmluZycpO1xuXHRpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBzZWNvbmQgYXJndW1lbnQgdG8gYmUgYW4gb3B0aW9ucyBvYmplY3QnKTtcblxuXHQvLyBJbnRlcnByZXQgb3B0aW9uc1xuXHRmaWxlbmFtZSA9IGZpbGVuYW1lLnRyaW0oKTtcblx0Y29uc3QgYXR0YWNoZWROYW1lID0gJ2F0dGFjaGVkJyBpbiBvcHRpb25zID8gb3B0aW9ucy5hdHRhY2hlZCA6ICdtYWluJztcblx0Y29uc3QgaGFuZGxlciA9ICdwcm9ncmVzcycgaW4gb3B0aW9ucyA/IG9wdGlvbnMucHJvZ3Jlc3MgOiBudWxsO1xuXG5cdC8vIFZhbGlkYXRlIGludGVycHJldGVkIG9wdGlvbnNcblx0aWYgKCFmaWxlbmFtZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQmFja3VwIGZpbGVuYW1lIGNhbm5vdCBiZSBhbiBlbXB0eSBzdHJpbmcnKTtcblx0aWYgKGZpbGVuYW1lID09PSAnOm1lbW9yeTonKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGJhY2t1cCBmaWxlbmFtZSBcIjptZW1vcnk6XCInKTtcblx0aWYgKHR5cGVvZiBhdHRhY2hlZE5hbWUgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgXCJhdHRhY2hlZFwiIG9wdGlvbiB0byBiZSBhIHN0cmluZycpO1xuXHRpZiAoIWF0dGFjaGVkTmFtZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiYXR0YWNoZWRcIiBvcHRpb24gY2Fubm90IGJlIGFuIGVtcHR5IHN0cmluZycpO1xuXHRpZiAoaGFuZGxlciAhPSBudWxsICYmIHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgXCJwcm9ncmVzc1wiIG9wdGlvbiB0byBiZSBhIGZ1bmN0aW9uJyk7XG5cblx0Ly8gTWFrZSBzdXJlIHRoZSBzcGVjaWZpZWQgZGlyZWN0b3J5IGV4aXN0c1xuXHRhd2FpdCBmc0FjY2VzcyhwYXRoLmRpcm5hbWUoZmlsZW5hbWUpKS5jYXRjaCgoKSA9PiB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IHNhdmUgYmFja3VwIGJlY2F1c2UgdGhlIGRpcmVjdG9yeSBkb2VzIG5vdCBleGlzdCcpO1xuXHR9KTtcblxuXHRjb25zdCBpc05ld0ZpbGUgPSBhd2FpdCBmc0FjY2VzcyhmaWxlbmFtZSkudGhlbigoKSA9PiBmYWxzZSwgKCkgPT4gdHJ1ZSk7XG5cdHJldHVybiBydW5CYWNrdXAodGhpc1tjcHBkYl0uYmFja3VwKHRoaXMsIGF0dGFjaGVkTmFtZSwgZmlsZW5hbWUsIGlzTmV3RmlsZSksIGhhbmRsZXIgfHwgbnVsbCk7XG59O1xuXG5jb25zdCBydW5CYWNrdXAgPSAoYmFja3VwLCBoYW5kbGVyKSA9PiB7XG5cdGxldCByYXRlID0gMDtcblx0bGV0IHVzZURlZmF1bHQgPSB0cnVlO1xuXG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0c2V0SW1tZWRpYXRlKGZ1bmN0aW9uIHN0ZXAoKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb25zdCBwcm9ncmVzcyA9IGJhY2t1cC50cmFuc2ZlcihyYXRlKTtcblx0XHRcdFx0aWYgKCFwcm9ncmVzcy5yZW1haW5pbmdQYWdlcykge1xuXHRcdFx0XHRcdGJhY2t1cC5jbG9zZSgpO1xuXHRcdFx0XHRcdHJlc29sdmUocHJvZ3Jlc3MpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodXNlRGVmYXVsdCkge1xuXHRcdFx0XHRcdHVzZURlZmF1bHQgPSBmYWxzZTtcblx0XHRcdFx0XHRyYXRlID0gMTAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChoYW5kbGVyKSB7XG5cdFx0XHRcdFx0Y29uc3QgcmV0ID0gaGFuZGxlcihwcm9ncmVzcyk7XG5cdFx0XHRcdFx0aWYgKHJldCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIHJldCA9PT0gJ251bWJlcicgJiYgcmV0ID09PSByZXQpIHJhdGUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigweDdmZmZmZmZmLCBNYXRoLnJvdW5kKHJldCkpKTtcblx0XHRcdFx0XHRcdGVsc2UgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgcHJvZ3Jlc3MgY2FsbGJhY2sgdG8gcmV0dXJuIGEgbnVtYmVyIG9yIHVuZGVmaW5lZCcpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzZXRJbW1lZGlhdGUoc3RlcCk7XG5cdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0YmFja3VwLmNsb3NlKCk7XG5cdFx0XHRcdHJlamVjdChlcnIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/backup.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/function.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/function.js ***!
  \******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { getBooleanOption, cppdb } = __webpack_require__(/*! ../util */ \"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/util.js\");\n\nmodule.exports = function defineFunction(name, options, fn) {\n\t// Apply defaults\n\tif (options == null) options = {};\n\tif (typeof options === 'function') { fn = options; options = {}; }\n\n\t// Validate arguments\n\tif (typeof name !== 'string') throw new TypeError('Expected first argument to be a string');\n\tif (typeof fn !== 'function') throw new TypeError('Expected last argument to be a function');\n\tif (typeof options !== 'object') throw new TypeError('Expected second argument to be an options object');\n\tif (!name) throw new TypeError('User-defined function name cannot be an empty string');\n\n\t// Interpret options\n\tconst safeIntegers = 'safeIntegers' in options ? +getBooleanOption(options, 'safeIntegers') : 2;\n\tconst deterministic = getBooleanOption(options, 'deterministic');\n\tconst directOnly = getBooleanOption(options, 'directOnly');\n\tconst varargs = getBooleanOption(options, 'varargs');\n\tlet argCount = -1;\n\n\t// Determine argument count\n\tif (!varargs) {\n\t\targCount = fn.length;\n\t\tif (!Number.isInteger(argCount) || argCount < 0) throw new TypeError('Expected function.length to be a positive integer');\n\t\tif (argCount > 100) throw new RangeError('User-defined functions cannot have more than 100 arguments');\n\t}\n\n\tthis[cppdb].function(fn, name, argCount, safeIntegers, deterministic, directOnly);\n\treturn this;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDEyLjIuMC9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL21ldGhvZHMvZnVuY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixRQUFRLDBCQUEwQixFQUFFLG1CQUFPLENBQUMsZ0hBQVM7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxjQUFjOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvcm9oYW4vY29kZS9yZWFsdGFsay9ub2RlX21vZHVsZXMvLnBucG0vYmV0dGVyLXNxbGl0ZTNAMTIuMi4wL25vZGVfbW9kdWxlcy9iZXR0ZXItc3FsaXRlMy9saWIvbWV0aG9kcy9mdW5jdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCB7IGdldEJvb2xlYW5PcHRpb24sIGNwcGRiIH0gPSByZXF1aXJlKCcuLi91dGlsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmaW5lRnVuY3Rpb24obmFtZSwgb3B0aW9ucywgZm4pIHtcblx0Ly8gQXBwbHkgZGVmYXVsdHNcblx0aWYgKG9wdGlvbnMgPT0gbnVsbCkgb3B0aW9ucyA9IHt9O1xuXHRpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHsgZm4gPSBvcHRpb25zOyBvcHRpb25zID0ge307IH1cblxuXHQvLyBWYWxpZGF0ZSBhcmd1bWVudHNcblx0aWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgZmlyc3QgYXJndW1lbnQgdG8gYmUgYSBzdHJpbmcnKTtcblx0aWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgbGFzdCBhcmd1bWVudCB0byBiZSBhIGZ1bmN0aW9uJyk7XG5cdGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHNlY29uZCBhcmd1bWVudCB0byBiZSBhbiBvcHRpb25zIG9iamVjdCcpO1xuXHRpZiAoIW5hbWUpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VzZXItZGVmaW5lZCBmdW5jdGlvbiBuYW1lIGNhbm5vdCBiZSBhbiBlbXB0eSBzdHJpbmcnKTtcblxuXHQvLyBJbnRlcnByZXQgb3B0aW9uc1xuXHRjb25zdCBzYWZlSW50ZWdlcnMgPSAnc2FmZUludGVnZXJzJyBpbiBvcHRpb25zID8gK2dldEJvb2xlYW5PcHRpb24ob3B0aW9ucywgJ3NhZmVJbnRlZ2VycycpIDogMjtcblx0Y29uc3QgZGV0ZXJtaW5pc3RpYyA9IGdldEJvb2xlYW5PcHRpb24ob3B0aW9ucywgJ2RldGVybWluaXN0aWMnKTtcblx0Y29uc3QgZGlyZWN0T25seSA9IGdldEJvb2xlYW5PcHRpb24ob3B0aW9ucywgJ2RpcmVjdE9ubHknKTtcblx0Y29uc3QgdmFyYXJncyA9IGdldEJvb2xlYW5PcHRpb24ob3B0aW9ucywgJ3ZhcmFyZ3MnKTtcblx0bGV0IGFyZ0NvdW50ID0gLTE7XG5cblx0Ly8gRGV0ZXJtaW5lIGFyZ3VtZW50IGNvdW50XG5cdGlmICghdmFyYXJncykge1xuXHRcdGFyZ0NvdW50ID0gZm4ubGVuZ3RoO1xuXHRcdGlmICghTnVtYmVyLmlzSW50ZWdlcihhcmdDb3VudCkgfHwgYXJnQ291bnQgPCAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBmdW5jdGlvbi5sZW5ndGggdG8gYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyJyk7XG5cdFx0aWYgKGFyZ0NvdW50ID4gMTAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVXNlci1kZWZpbmVkIGZ1bmN0aW9ucyBjYW5ub3QgaGF2ZSBtb3JlIHRoYW4gMTAwIGFyZ3VtZW50cycpO1xuXHR9XG5cblx0dGhpc1tjcHBkYl0uZnVuY3Rpb24oZm4sIG5hbWUsIGFyZ0NvdW50LCBzYWZlSW50ZWdlcnMsIGRldGVybWluaXN0aWMsIGRpcmVjdE9ubHkpO1xuXHRyZXR1cm4gdGhpcztcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/function.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/inspect.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/inspect.js ***!
  \*****************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\nconst DatabaseInspection = function Database() {};\n\nmodule.exports = function inspect(depth, opts) {\n\treturn Object.assign(new DatabaseInspection(), this);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDEyLjIuMC9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL21ldGhvZHMvaW5zcGVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3JvaGFuL2NvZGUvcmVhbHRhbGsvbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDEyLjIuMC9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL21ldGhvZHMvaW5zcGVjdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBEYXRhYmFzZUluc3BlY3Rpb24gPSBmdW5jdGlvbiBEYXRhYmFzZSgpIHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluc3BlY3QoZGVwdGgsIG9wdHMpIHtcblx0cmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IERhdGFiYXNlSW5zcGVjdGlvbigpLCB0aGlzKTtcbn07XG5cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/inspect.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/pragma.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/pragma.js ***!
  \****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { getBooleanOption, cppdb } = __webpack_require__(/*! ../util */ \"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/util.js\");\n\nmodule.exports = function pragma(source, options) {\n\tif (options == null) options = {};\n\tif (typeof source !== 'string') throw new TypeError('Expected first argument to be a string');\n\tif (typeof options !== 'object') throw new TypeError('Expected second argument to be an options object');\n\tconst simple = getBooleanOption(options, 'simple');\n\n\tconst stmt = this[cppdb].prepare(`PRAGMA ${source}`, this, true);\n\treturn simple ? stmt.pluck().get() : stmt.all();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDEyLjIuMC9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL21ldGhvZHMvcHJhZ21hLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsUUFBUSwwQkFBMEIsRUFBRSxtQkFBTyxDQUFDLGdIQUFTOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRDQUE0QyxPQUFPO0FBQ25EO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yb2hhbi9jb2RlL3JlYWx0YWxrL25vZGVfbW9kdWxlcy8ucG5wbS9iZXR0ZXItc3FsaXRlM0AxMi4yLjAvbm9kZV9tb2R1bGVzL2JldHRlci1zcWxpdGUzL2xpYi9tZXRob2RzL3ByYWdtYS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCB7IGdldEJvb2xlYW5PcHRpb24sIGNwcGRiIH0gPSByZXF1aXJlKCcuLi91dGlsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcHJhZ21hKHNvdXJjZSwgb3B0aW9ucykge1xuXHRpZiAob3B0aW9ucyA9PSBudWxsKSBvcHRpb25zID0ge307XG5cdGlmICh0eXBlb2Ygc291cmNlICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgZmlyc3QgYXJndW1lbnQgdG8gYmUgYSBzdHJpbmcnKTtcblx0aWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0JykgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgc2Vjb25kIGFyZ3VtZW50IHRvIGJlIGFuIG9wdGlvbnMgb2JqZWN0Jyk7XG5cdGNvbnN0IHNpbXBsZSA9IGdldEJvb2xlYW5PcHRpb24ob3B0aW9ucywgJ3NpbXBsZScpO1xuXG5cdGNvbnN0IHN0bXQgPSB0aGlzW2NwcGRiXS5wcmVwYXJlKGBQUkFHTUEgJHtzb3VyY2V9YCwgdGhpcywgdHJ1ZSk7XG5cdHJldHVybiBzaW1wbGUgPyBzdG10LnBsdWNrKCkuZ2V0KCkgOiBzdG10LmFsbCgpO1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/pragma.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/serialize.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/serialize.js ***!
  \*******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { cppdb } = __webpack_require__(/*! ../util */ \"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/util.js\");\n\nmodule.exports = function serialize(options) {\n\tif (options == null) options = {};\n\n\t// Validate arguments\n\tif (typeof options !== 'object') throw new TypeError('Expected first argument to be an options object');\n\n\t// Interpret and validate options\n\tconst attachedName = 'attached' in options ? options.attached : 'main';\n\tif (typeof attachedName !== 'string') throw new TypeError('Expected the \"attached\" option to be a string');\n\tif (!attachedName) throw new TypeError('The \"attached\" option cannot be an empty string');\n\n\treturn this[cppdb].serialize(attachedName);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDEyLjIuMC9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL21ldGhvZHMvc2VyaWFsaXplLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsUUFBUSxRQUFRLEVBQUUsbUJBQU8sQ0FBQyxnSEFBUzs7QUFFbkM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yb2hhbi9jb2RlL3JlYWx0YWxrL25vZGVfbW9kdWxlcy8ucG5wbS9iZXR0ZXItc3FsaXRlM0AxMi4yLjAvbm9kZV9tb2R1bGVzL2JldHRlci1zcWxpdGUzL2xpYi9tZXRob2RzL3NlcmlhbGl6ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCB7IGNwcGRiIH0gPSByZXF1aXJlKCcuLi91dGlsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2VyaWFsaXplKG9wdGlvbnMpIHtcblx0aWYgKG9wdGlvbnMgPT0gbnVsbCkgb3B0aW9ucyA9IHt9O1xuXG5cdC8vIFZhbGlkYXRlIGFyZ3VtZW50c1xuXHRpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBmaXJzdCBhcmd1bWVudCB0byBiZSBhbiBvcHRpb25zIG9iamVjdCcpO1xuXG5cdC8vIEludGVycHJldCBhbmQgdmFsaWRhdGUgb3B0aW9uc1xuXHRjb25zdCBhdHRhY2hlZE5hbWUgPSAnYXR0YWNoZWQnIGluIG9wdGlvbnMgPyBvcHRpb25zLmF0dGFjaGVkIDogJ21haW4nO1xuXHRpZiAodHlwZW9mIGF0dGFjaGVkTmFtZSAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBcImF0dGFjaGVkXCIgb3B0aW9uIHRvIGJlIGEgc3RyaW5nJyk7XG5cdGlmICghYXR0YWNoZWROYW1lKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJhdHRhY2hlZFwiIG9wdGlvbiBjYW5ub3QgYmUgYW4gZW1wdHkgc3RyaW5nJyk7XG5cblx0cmV0dXJuIHRoaXNbY3BwZGJdLnNlcmlhbGl6ZShhdHRhY2hlZE5hbWUpO1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/serialize.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/table.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/table.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"buffer\")[\"Buffer\"];\n\nconst { cppdb } = __webpack_require__(/*! ../util */ \"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/util.js\");\n\nmodule.exports = function defineTable(name, factory) {\n\t// Validate arguments\n\tif (typeof name !== 'string') throw new TypeError('Expected first argument to be a string');\n\tif (!name) throw new TypeError('Virtual table module name cannot be an empty string');\n\n\t// Determine whether the module is eponymous-only or not\n\tlet eponymous = false;\n\tif (typeof factory === 'object' && factory !== null) {\n\t\teponymous = true;\n\t\tfactory = defer(parseTableDefinition(factory, 'used', name));\n\t} else {\n\t\tif (typeof factory !== 'function') throw new TypeError('Expected second argument to be a function or a table definition object');\n\t\tfactory = wrapFactory(factory);\n\t}\n\n\tthis[cppdb].table(factory, name, eponymous);\n\treturn this;\n};\n\nfunction wrapFactory(factory) {\n\treturn function virtualTableFactory(moduleName, databaseName, tableName, ...args) {\n\t\tconst thisObject = {\n\t\t\tmodule: moduleName,\n\t\t\tdatabase: databaseName,\n\t\t\ttable: tableName,\n\t\t};\n\n\t\t// Generate a new table definition by invoking the factory\n\t\tconst def = apply.call(factory, thisObject, args);\n\t\tif (typeof def !== 'object' || def === null) {\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" did not return a table definition object`);\n\t\t}\n\n\t\treturn parseTableDefinition(def, 'returned', moduleName);\n\t};\n}\n\nfunction parseTableDefinition(def, verb, moduleName) {\n\t// Validate required properties\n\tif (!hasOwnProperty.call(def, 'rows')) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition without a \"rows\" property`);\n\t}\n\tif (!hasOwnProperty.call(def, 'columns')) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition without a \"columns\" property`);\n\t}\n\n\t// Validate \"rows\" property\n\tconst rows = def.rows;\n\tif (typeof rows !== 'function' || Object.getPrototypeOf(rows) !== GeneratorFunctionPrototype) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"rows\" property (should be a generator function)`);\n\t}\n\n\t// Validate \"columns\" property\n\tlet columns = def.columns;\n\tif (!Array.isArray(columns) || !(columns = [...columns]).every(x => typeof x === 'string')) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"columns\" property (should be an array of strings)`);\n\t}\n\tif (columns.length !== new Set(columns).size) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with duplicate column names`);\n\t}\n\tif (!columns.length) {\n\t\tthrow new RangeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with zero columns`);\n\t}\n\n\t// Validate \"parameters\" property\n\tlet parameters;\n\tif (hasOwnProperty.call(def, 'parameters')) {\n\t\tparameters = def.parameters;\n\t\tif (!Array.isArray(parameters) || !(parameters = [...parameters]).every(x => typeof x === 'string')) {\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"parameters\" property (should be an array of strings)`);\n\t\t}\n\t} else {\n\t\tparameters = inferParameters(rows);\n\t}\n\tif (parameters.length !== new Set(parameters).size) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with duplicate parameter names`);\n\t}\n\tif (parameters.length > 32) {\n\t\tthrow new RangeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with more than the maximum number of 32 parameters`);\n\t}\n\tfor (const parameter of parameters) {\n\t\tif (columns.includes(parameter)) {\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with column \"${parameter}\" which was ambiguously defined as both a column and parameter`);\n\t\t}\n\t}\n\n\t// Validate \"safeIntegers\" option\n\tlet safeIntegers = 2;\n\tif (hasOwnProperty.call(def, 'safeIntegers')) {\n\t\tconst bool = def.safeIntegers;\n\t\tif (typeof bool !== 'boolean') {\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"safeIntegers\" property (should be a boolean)`);\n\t\t}\n\t\tsafeIntegers = +bool;\n\t}\n\n\t// Validate \"directOnly\" option\n\tlet directOnly = false;\n\tif (hasOwnProperty.call(def, 'directOnly')) {\n\t\tdirectOnly = def.directOnly;\n\t\tif (typeof directOnly !== 'boolean') {\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"directOnly\" property (should be a boolean)`);\n\t\t}\n\t}\n\n\t// Generate SQL for the virtual table definition\n\tconst columnDefinitions = [\n\t\t...parameters.map(identifier).map(str => `${str} HIDDEN`),\n\t\t...columns.map(identifier),\n\t];\n\treturn [\n\t\t`CREATE TABLE x(${columnDefinitions.join(', ')});`,\n\t\twrapGenerator(rows, new Map(columns.map((x, i) => [x, parameters.length + i])), moduleName),\n\t\tparameters,\n\t\tsafeIntegers,\n\t\tdirectOnly,\n\t];\n}\n\nfunction wrapGenerator(generator, columnMap, moduleName) {\n\treturn function* virtualTable(...args) {\n\t\t/*\n\t\t\tWe must defensively clone any buffers in the arguments, because\n\t\t\totherwise the generator could mutate one of them, which would cause\n\t\t\tus to return incorrect values for hidden columns, potentially\n\t\t\tcorrupting the database.\n\t\t */\n\t\tconst output = args.map(x => Buffer.isBuffer(x) ? Buffer.from(x) : x);\n\t\tfor (let i = 0; i < columnMap.size; ++i) {\n\t\t\toutput.push(null); // Fill with nulls to prevent gaps in array (v8 optimization)\n\t\t}\n\t\tfor (const row of generator(...args)) {\n\t\t\tif (Array.isArray(row)) {\n\t\t\t\textractRowArray(row, output, columnMap.size, moduleName);\n\t\t\t\tyield output;\n\t\t\t} else if (typeof row === 'object' && row !== null) {\n\t\t\t\textractRowObject(row, output, columnMap, moduleName);\n\t\t\t\tyield output;\n\t\t\t} else {\n\t\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" yielded something that isn't a valid row object`);\n\t\t\t}\n\t\t}\n\t};\n}\n\nfunction extractRowArray(row, output, columnCount, moduleName) {\n\tif (row.length !== columnCount) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" yielded a row with an incorrect number of columns`);\n\t}\n\tconst offset = output.length - columnCount;\n\tfor (let i = 0; i < columnCount; ++i) {\n\t\toutput[i + offset] = row[i];\n\t}\n}\n\nfunction extractRowObject(row, output, columnMap, moduleName) {\n\tlet count = 0;\n\tfor (const key of Object.keys(row)) {\n\t\tconst index = columnMap.get(key);\n\t\tif (index === undefined) {\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" yielded a row with an undeclared column \"${key}\"`);\n\t\t}\n\t\toutput[index] = row[key];\n\t\tcount += 1;\n\t}\n\tif (count !== columnMap.size) {\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" yielded a row with missing columns`);\n\t}\n}\n\nfunction inferParameters({ length }) {\n\tif (!Number.isInteger(length) || length < 0) {\n\t\tthrow new TypeError('Expected function.length to be a positive integer');\n\t}\n\tconst params = [];\n\tfor (let i = 0; i < length; ++i) {\n\t\tparams.push(`$${i + 1}`);\n\t}\n\treturn params;\n}\n\nconst { hasOwnProperty } = Object.prototype;\nconst { apply } = Function.prototype;\nconst GeneratorFunctionPrototype = Object.getPrototypeOf(function*(){});\nconst identifier = str => `\"${str.replace(/\"/g, '\"\"')}\"`;\nconst defer = x => () => x;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/table.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/transaction.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/transaction.js ***!
  \*********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { cppdb } = __webpack_require__(/*! ../util */ \"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/util.js\");\nconst controllers = new WeakMap();\n\nmodule.exports = function transaction(fn) {\n\tif (typeof fn !== 'function') throw new TypeError('Expected first argument to be a function');\n\n\tconst db = this[cppdb];\n\tconst controller = getController(db, this);\n\tconst { apply } = Function.prototype;\n\n\t// Each version of the transaction function has these same properties\n\tconst properties = {\n\t\tdefault: { value: wrapTransaction(apply, fn, db, controller.default) },\n\t\tdeferred: { value: wrapTransaction(apply, fn, db, controller.deferred) },\n\t\timmediate: { value: wrapTransaction(apply, fn, db, controller.immediate) },\n\t\texclusive: { value: wrapTransaction(apply, fn, db, controller.exclusive) },\n\t\tdatabase: { value: this, enumerable: true },\n\t};\n\n\tObject.defineProperties(properties.default.value, properties);\n\tObject.defineProperties(properties.deferred.value, properties);\n\tObject.defineProperties(properties.immediate.value, properties);\n\tObject.defineProperties(properties.exclusive.value, properties);\n\n\t// Return the default version of the transaction function\n\treturn properties.default.value;\n};\n\n// Return the database's cached transaction controller, or create a new one\nconst getController = (db, self) => {\n\tlet controller = controllers.get(db);\n\tif (!controller) {\n\t\tconst shared = {\n\t\t\tcommit: db.prepare('COMMIT', self, false),\n\t\t\trollback: db.prepare('ROLLBACK', self, false),\n\t\t\tsavepoint: db.prepare('SAVEPOINT `\\t_bs3.\\t`', self, false),\n\t\t\trelease: db.prepare('RELEASE `\\t_bs3.\\t`', self, false),\n\t\t\trollbackTo: db.prepare('ROLLBACK TO `\\t_bs3.\\t`', self, false),\n\t\t};\n\t\tcontrollers.set(db, controller = {\n\t\t\tdefault: Object.assign({ begin: db.prepare('BEGIN', self, false) }, shared),\n\t\t\tdeferred: Object.assign({ begin: db.prepare('BEGIN DEFERRED', self, false) }, shared),\n\t\t\timmediate: Object.assign({ begin: db.prepare('BEGIN IMMEDIATE', self, false) }, shared),\n\t\t\texclusive: Object.assign({ begin: db.prepare('BEGIN EXCLUSIVE', self, false) }, shared),\n\t\t});\n\t}\n\treturn controller;\n};\n\n// Return a new transaction function by wrapping the given function\nconst wrapTransaction = (apply, fn, db, { begin, commit, rollback, savepoint, release, rollbackTo }) => function sqliteTransaction() {\n\tlet before, after, undo;\n\tif (db.inTransaction) {\n\t\tbefore = savepoint;\n\t\tafter = release;\n\t\tundo = rollbackTo;\n\t} else {\n\t\tbefore = begin;\n\t\tafter = commit;\n\t\tundo = rollback;\n\t}\n\tbefore.run();\n\ttry {\n\t\tconst result = apply.call(fn, this, arguments);\n\t\tif (result && typeof result.then === 'function') {\n\t\t\tthrow new TypeError('Transaction function cannot return a promise');\n\t\t}\n\t\tafter.run();\n\t\treturn result;\n\t} catch (ex) {\n\t\tif (db.inTransaction) {\n\t\t\tundo.run();\n\t\t\tif (undo !== rollback) after.run();\n\t\t}\n\t\tthrow ex;\n\t}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDEyLjIuMC9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL21ldGhvZHMvdHJhbnNhY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixRQUFRLFFBQVEsRUFBRSxtQkFBTyxDQUFDLGdIQUFTO0FBQ25DOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVMsUUFBUTs7QUFFakI7QUFDQTtBQUNBLGFBQWEsMkRBQTJEO0FBQ3hFLGNBQWMsNERBQTREO0FBQzFFLGVBQWUsNkRBQTZEO0FBQzVFLGVBQWUsNkRBQTZEO0FBQzVFLGNBQWMsK0JBQStCO0FBQzdDOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIseUNBQXlDO0FBQ3JFLDZCQUE2QixrREFBa0Q7QUFDL0UsOEJBQThCLG1EQUFtRDtBQUNqRiw4QkFBOEIsbURBQW1EO0FBQ2pGLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQ0FBMEMseURBQXlEO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvcm9oYW4vY29kZS9yZWFsdGFsay9ub2RlX21vZHVsZXMvLnBucG0vYmV0dGVyLXNxbGl0ZTNAMTIuMi4wL25vZGVfbW9kdWxlcy9iZXR0ZXItc3FsaXRlMy9saWIvbWV0aG9kcy90cmFuc2FjdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCB7IGNwcGRiIH0gPSByZXF1aXJlKCcuLi91dGlsJyk7XG5jb25zdCBjb250cm9sbGVycyA9IG5ldyBXZWFrTWFwKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNhY3Rpb24oZm4pIHtcblx0aWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgZmlyc3QgYXJndW1lbnQgdG8gYmUgYSBmdW5jdGlvbicpO1xuXG5cdGNvbnN0IGRiID0gdGhpc1tjcHBkYl07XG5cdGNvbnN0IGNvbnRyb2xsZXIgPSBnZXRDb250cm9sbGVyKGRiLCB0aGlzKTtcblx0Y29uc3QgeyBhcHBseSB9ID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG5cdC8vIEVhY2ggdmVyc2lvbiBvZiB0aGUgdHJhbnNhY3Rpb24gZnVuY3Rpb24gaGFzIHRoZXNlIHNhbWUgcHJvcGVydGllc1xuXHRjb25zdCBwcm9wZXJ0aWVzID0ge1xuXHRcdGRlZmF1bHQ6IHsgdmFsdWU6IHdyYXBUcmFuc2FjdGlvbihhcHBseSwgZm4sIGRiLCBjb250cm9sbGVyLmRlZmF1bHQpIH0sXG5cdFx0ZGVmZXJyZWQ6IHsgdmFsdWU6IHdyYXBUcmFuc2FjdGlvbihhcHBseSwgZm4sIGRiLCBjb250cm9sbGVyLmRlZmVycmVkKSB9LFxuXHRcdGltbWVkaWF0ZTogeyB2YWx1ZTogd3JhcFRyYW5zYWN0aW9uKGFwcGx5LCBmbiwgZGIsIGNvbnRyb2xsZXIuaW1tZWRpYXRlKSB9LFxuXHRcdGV4Y2x1c2l2ZTogeyB2YWx1ZTogd3JhcFRyYW5zYWN0aW9uKGFwcGx5LCBmbiwgZGIsIGNvbnRyb2xsZXIuZXhjbHVzaXZlKSB9LFxuXHRcdGRhdGFiYXNlOiB7IHZhbHVlOiB0aGlzLCBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdH07XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMocHJvcGVydGllcy5kZWZhdWx0LnZhbHVlLCBwcm9wZXJ0aWVzKTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMocHJvcGVydGllcy5kZWZlcnJlZC52YWx1ZSwgcHJvcGVydGllcyk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHByb3BlcnRpZXMuaW1tZWRpYXRlLnZhbHVlLCBwcm9wZXJ0aWVzKTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMocHJvcGVydGllcy5leGNsdXNpdmUudmFsdWUsIHByb3BlcnRpZXMpO1xuXG5cdC8vIFJldHVybiB0aGUgZGVmYXVsdCB2ZXJzaW9uIG9mIHRoZSB0cmFuc2FjdGlvbiBmdW5jdGlvblxuXHRyZXR1cm4gcHJvcGVydGllcy5kZWZhdWx0LnZhbHVlO1xufTtcblxuLy8gUmV0dXJuIHRoZSBkYXRhYmFzZSdzIGNhY2hlZCB0cmFuc2FjdGlvbiBjb250cm9sbGVyLCBvciBjcmVhdGUgYSBuZXcgb25lXG5jb25zdCBnZXRDb250cm9sbGVyID0gKGRiLCBzZWxmKSA9PiB7XG5cdGxldCBjb250cm9sbGVyID0gY29udHJvbGxlcnMuZ2V0KGRiKTtcblx0aWYgKCFjb250cm9sbGVyKSB7XG5cdFx0Y29uc3Qgc2hhcmVkID0ge1xuXHRcdFx0Y29tbWl0OiBkYi5wcmVwYXJlKCdDT01NSVQnLCBzZWxmLCBmYWxzZSksXG5cdFx0XHRyb2xsYmFjazogZGIucHJlcGFyZSgnUk9MTEJBQ0snLCBzZWxmLCBmYWxzZSksXG5cdFx0XHRzYXZlcG9pbnQ6IGRiLnByZXBhcmUoJ1NBVkVQT0lOVCBgXFx0X2JzMy5cXHRgJywgc2VsZiwgZmFsc2UpLFxuXHRcdFx0cmVsZWFzZTogZGIucHJlcGFyZSgnUkVMRUFTRSBgXFx0X2JzMy5cXHRgJywgc2VsZiwgZmFsc2UpLFxuXHRcdFx0cm9sbGJhY2tUbzogZGIucHJlcGFyZSgnUk9MTEJBQ0sgVE8gYFxcdF9iczMuXFx0YCcsIHNlbGYsIGZhbHNlKSxcblx0XHR9O1xuXHRcdGNvbnRyb2xsZXJzLnNldChkYiwgY29udHJvbGxlciA9IHtcblx0XHRcdGRlZmF1bHQ6IE9iamVjdC5hc3NpZ24oeyBiZWdpbjogZGIucHJlcGFyZSgnQkVHSU4nLCBzZWxmLCBmYWxzZSkgfSwgc2hhcmVkKSxcblx0XHRcdGRlZmVycmVkOiBPYmplY3QuYXNzaWduKHsgYmVnaW46IGRiLnByZXBhcmUoJ0JFR0lOIERFRkVSUkVEJywgc2VsZiwgZmFsc2UpIH0sIHNoYXJlZCksXG5cdFx0XHRpbW1lZGlhdGU6IE9iamVjdC5hc3NpZ24oeyBiZWdpbjogZGIucHJlcGFyZSgnQkVHSU4gSU1NRURJQVRFJywgc2VsZiwgZmFsc2UpIH0sIHNoYXJlZCksXG5cdFx0XHRleGNsdXNpdmU6IE9iamVjdC5hc3NpZ24oeyBiZWdpbjogZGIucHJlcGFyZSgnQkVHSU4gRVhDTFVTSVZFJywgc2VsZiwgZmFsc2UpIH0sIHNoYXJlZCksXG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIGNvbnRyb2xsZXI7XG59O1xuXG4vLyBSZXR1cm4gYSBuZXcgdHJhbnNhY3Rpb24gZnVuY3Rpb24gYnkgd3JhcHBpbmcgdGhlIGdpdmVuIGZ1bmN0aW9uXG5jb25zdCB3cmFwVHJhbnNhY3Rpb24gPSAoYXBwbHksIGZuLCBkYiwgeyBiZWdpbiwgY29tbWl0LCByb2xsYmFjaywgc2F2ZXBvaW50LCByZWxlYXNlLCByb2xsYmFja1RvIH0pID0+IGZ1bmN0aW9uIHNxbGl0ZVRyYW5zYWN0aW9uKCkge1xuXHRsZXQgYmVmb3JlLCBhZnRlciwgdW5kbztcblx0aWYgKGRiLmluVHJhbnNhY3Rpb24pIHtcblx0XHRiZWZvcmUgPSBzYXZlcG9pbnQ7XG5cdFx0YWZ0ZXIgPSByZWxlYXNlO1xuXHRcdHVuZG8gPSByb2xsYmFja1RvO1xuXHR9IGVsc2Uge1xuXHRcdGJlZm9yZSA9IGJlZ2luO1xuXHRcdGFmdGVyID0gY29tbWl0O1xuXHRcdHVuZG8gPSByb2xsYmFjaztcblx0fVxuXHRiZWZvcmUucnVuKCk7XG5cdHRyeSB7XG5cdFx0Y29uc3QgcmVzdWx0ID0gYXBwbHkuY2FsbChmbiwgdGhpcywgYXJndW1lbnRzKTtcblx0XHRpZiAocmVzdWx0ICYmIHR5cGVvZiByZXN1bHQudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignVHJhbnNhY3Rpb24gZnVuY3Rpb24gY2Fubm90IHJldHVybiBhIHByb21pc2UnKTtcblx0XHR9XG5cdFx0YWZ0ZXIucnVuKCk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSBjYXRjaCAoZXgpIHtcblx0XHRpZiAoZGIuaW5UcmFuc2FjdGlvbikge1xuXHRcdFx0dW5kby5ydW4oKTtcblx0XHRcdGlmICh1bmRvICE9PSByb2xsYmFjaykgYWZ0ZXIucnVuKCk7XG5cdFx0fVxuXHRcdHRocm93IGV4O1xuXHR9XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/transaction.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/wrappers.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/wrappers.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst { cppdb } = __webpack_require__(/*! ../util */ \"(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/util.js\");\n\nexports.prepare = function prepare(sql) {\n\treturn this[cppdb].prepare(sql, this, false);\n};\n\nexports.exec = function exec(sql) {\n\tthis[cppdb].exec(sql);\n\treturn this;\n};\n\nexports.close = function close() {\n\tthis[cppdb].close();\n\treturn this;\n};\n\nexports.loadExtension = function loadExtension(...args) {\n\tthis[cppdb].loadExtension(...args);\n\treturn this;\n};\n\nexports.defaultSafeIntegers = function defaultSafeIntegers(...args) {\n\tthis[cppdb].defaultSafeIntegers(...args);\n\treturn this;\n};\n\nexports.unsafeMode = function unsafeMode(...args) {\n\tthis[cppdb].unsafeMode(...args);\n\treturn this;\n};\n\nexports.getters = {\n\tname: {\n\t\tget: function name() { return this[cppdb].name; },\n\t\tenumerable: true,\n\t},\n\topen: {\n\t\tget: function open() { return this[cppdb].open; },\n\t\tenumerable: true,\n\t},\n\tinTransaction: {\n\t\tget: function inTransaction() { return this[cppdb].inTransaction; },\n\t\tenumerable: true,\n\t},\n\treadonly: {\n\t\tget: function readonly() { return this[cppdb].readonly; },\n\t\tenumerable: true,\n\t},\n\tmemory: {\n\t\tget: function memory() { return this[cppdb].memory; },\n\t\tenumerable: true,\n\t},\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDEyLjIuMC9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL21ldGhvZHMvd3JhcHBlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixRQUFRLFFBQVEsRUFBRSxtQkFBTyxDQUFDLGdIQUFTOztBQUVuQyxlQUFlO0FBQ2Y7QUFDQTs7QUFFQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTs7QUFFQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7O0FBRUEsZUFBZTtBQUNmO0FBQ0EseUJBQXlCLDBCQUEwQjtBQUNuRDtBQUNBLEVBQUU7QUFDRjtBQUNBLHlCQUF5QiwwQkFBMEI7QUFDbkQ7QUFDQSxFQUFFO0FBQ0Y7QUFDQSxrQ0FBa0MsbUNBQW1DO0FBQ3JFO0FBQ0EsRUFBRTtBQUNGO0FBQ0EsNkJBQTZCLDhCQUE4QjtBQUMzRDtBQUNBLEVBQUU7QUFDRjtBQUNBLDJCQUEyQiw0QkFBNEI7QUFDdkQ7QUFDQSxFQUFFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yb2hhbi9jb2RlL3JlYWx0YWxrL25vZGVfbW9kdWxlcy8ucG5wbS9iZXR0ZXItc3FsaXRlM0AxMi4yLjAvbm9kZV9tb2R1bGVzL2JldHRlci1zcWxpdGUzL2xpYi9tZXRob2RzL3dyYXBwZXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IHsgY3BwZGIgfSA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcblxuZXhwb3J0cy5wcmVwYXJlID0gZnVuY3Rpb24gcHJlcGFyZShzcWwpIHtcblx0cmV0dXJuIHRoaXNbY3BwZGJdLnByZXBhcmUoc3FsLCB0aGlzLCBmYWxzZSk7XG59O1xuXG5leHBvcnRzLmV4ZWMgPSBmdW5jdGlvbiBleGVjKHNxbCkge1xuXHR0aGlzW2NwcGRiXS5leGVjKHNxbCk7XG5cdHJldHVybiB0aGlzO1xufTtcblxuZXhwb3J0cy5jbG9zZSA9IGZ1bmN0aW9uIGNsb3NlKCkge1xuXHR0aGlzW2NwcGRiXS5jbG9zZSgpO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbmV4cG9ydHMubG9hZEV4dGVuc2lvbiA9IGZ1bmN0aW9uIGxvYWRFeHRlbnNpb24oLi4uYXJncykge1xuXHR0aGlzW2NwcGRiXS5sb2FkRXh0ZW5zaW9uKC4uLmFyZ3MpO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbmV4cG9ydHMuZGVmYXVsdFNhZmVJbnRlZ2VycyA9IGZ1bmN0aW9uIGRlZmF1bHRTYWZlSW50ZWdlcnMoLi4uYXJncykge1xuXHR0aGlzW2NwcGRiXS5kZWZhdWx0U2FmZUludGVnZXJzKC4uLmFyZ3MpO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbmV4cG9ydHMudW5zYWZlTW9kZSA9IGZ1bmN0aW9uIHVuc2FmZU1vZGUoLi4uYXJncykge1xuXHR0aGlzW2NwcGRiXS51bnNhZmVNb2RlKC4uLmFyZ3MpO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbmV4cG9ydHMuZ2V0dGVycyA9IHtcblx0bmFtZToge1xuXHRcdGdldDogZnVuY3Rpb24gbmFtZSgpIHsgcmV0dXJuIHRoaXNbY3BwZGJdLm5hbWU7IH0sXG5cdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0fSxcblx0b3Blbjoge1xuXHRcdGdldDogZnVuY3Rpb24gb3BlbigpIHsgcmV0dXJuIHRoaXNbY3BwZGJdLm9wZW47IH0sXG5cdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0fSxcblx0aW5UcmFuc2FjdGlvbjoge1xuXHRcdGdldDogZnVuY3Rpb24gaW5UcmFuc2FjdGlvbigpIHsgcmV0dXJuIHRoaXNbY3BwZGJdLmluVHJhbnNhY3Rpb247IH0sXG5cdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0fSxcblx0cmVhZG9ubHk6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uIHJlYWRvbmx5KCkgeyByZXR1cm4gdGhpc1tjcHBkYl0ucmVhZG9ubHk7IH0sXG5cdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0fSxcblx0bWVtb3J5OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiBtZW1vcnkoKSB7IHJldHVybiB0aGlzW2NwcGRiXS5tZW1vcnk7IH0sXG5cdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0fSxcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/methods/wrappers.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/sqlite-error.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/sqlite-error.js ***!
  \**************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\nconst descriptor = { value: 'SqliteError', writable: true, enumerable: false, configurable: true };\n\nfunction SqliteError(message, code) {\n\tif (new.target !== SqliteError) {\n\t\treturn new SqliteError(message, code);\n\t}\n\tif (typeof code !== 'string') {\n\t\tthrow new TypeError('Expected second argument to be a string');\n\t}\n\tError.call(this, message);\n\tdescriptor.value = '' + message;\n\tObject.defineProperty(this, 'message', descriptor);\n\tError.captureStackTrace(this, SqliteError);\n\tthis.code = code;\n}\nObject.setPrototypeOf(SqliteError, Error);\nObject.setPrototypeOf(SqliteError.prototype, Error.prototype);\nObject.defineProperty(SqliteError.prototype, 'name', descriptor);\nmodule.exports = SqliteError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDEyLjIuMC9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL3NxbGl0ZS1lcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLHFCQUFxQjs7QUFFckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3JvaGFuL2NvZGUvcmVhbHRhbGsvbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDEyLjIuMC9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL3NxbGl0ZS1lcnJvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBkZXNjcmlwdG9yID0geyB2YWx1ZTogJ1NxbGl0ZUVycm9yJywgd3JpdGFibGU6IHRydWUsIGVudW1lcmFibGU6IGZhbHNlLCBjb25maWd1cmFibGU6IHRydWUgfTtcblxuZnVuY3Rpb24gU3FsaXRlRXJyb3IobWVzc2FnZSwgY29kZSkge1xuXHRpZiAobmV3LnRhcmdldCAhPT0gU3FsaXRlRXJyb3IpIHtcblx0XHRyZXR1cm4gbmV3IFNxbGl0ZUVycm9yKG1lc3NhZ2UsIGNvZGUpO1xuXHR9XG5cdGlmICh0eXBlb2YgY29kZSAhPT0gJ3N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBzZWNvbmQgYXJndW1lbnQgdG8gYmUgYSBzdHJpbmcnKTtcblx0fVxuXHRFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UpO1xuXHRkZXNjcmlwdG9yLnZhbHVlID0gJycgKyBtZXNzYWdlO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ21lc3NhZ2UnLCBkZXNjcmlwdG9yKTtcblx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgU3FsaXRlRXJyb3IpO1xuXHR0aGlzLmNvZGUgPSBjb2RlO1xufVxuT2JqZWN0LnNldFByb3RvdHlwZU9mKFNxbGl0ZUVycm9yLCBFcnJvcik7XG5PYmplY3Quc2V0UHJvdG90eXBlT2YoU3FsaXRlRXJyb3IucHJvdG90eXBlLCBFcnJvci5wcm90b3R5cGUpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNxbGl0ZUVycm9yLnByb3RvdHlwZSwgJ25hbWUnLCBkZXNjcmlwdG9yKTtcbm1vZHVsZS5leHBvcnRzID0gU3FsaXRlRXJyb3I7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/sqlite-error.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/util.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/util.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.getBooleanOption = (options, key) => {\n\tlet value = false;\n\tif (key in options && typeof (value = options[key]) !== 'boolean') {\n\t\tthrow new TypeError(`Expected the \"${key}\" option to be a boolean`);\n\t}\n\treturn value;\n};\n\nexports.cppdb = Symbol();\nexports.inspect = Symbol.for('nodejs.util.inspect.custom');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2JldHRlci1zcWxpdGUzQDEyLjIuMC9ub2RlX21vZHVsZXMvYmV0dGVyLXNxbGl0ZTMvbGliL3V0aWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQSx1Q0FBdUMsSUFBSTtBQUMzQztBQUNBO0FBQ0E7O0FBRUEsYUFBYTtBQUNiLGVBQWUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yb2hhbi9jb2RlL3JlYWx0YWxrL25vZGVfbW9kdWxlcy8ucG5wbS9iZXR0ZXItc3FsaXRlM0AxMi4yLjAvbm9kZV9tb2R1bGVzL2JldHRlci1zcWxpdGUzL2xpYi91dGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5nZXRCb29sZWFuT3B0aW9uID0gKG9wdGlvbnMsIGtleSkgPT4ge1xuXHRsZXQgdmFsdWUgPSBmYWxzZTtcblx0aWYgKGtleSBpbiBvcHRpb25zICYmIHR5cGVvZiAodmFsdWUgPSBvcHRpb25zW2tleV0pICE9PSAnYm9vbGVhbicpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCB0aGUgXCIke2tleX1cIiBvcHRpb24gdG8gYmUgYSBib29sZWFuYCk7XG5cdH1cblx0cmV0dXJuIHZhbHVlO1xufTtcblxuZXhwb3J0cy5jcHBkYiA9IFN5bWJvbCgpO1xuZXhwb3J0cy5pbnNwZWN0ID0gU3ltYm9sLmZvcignbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/.pnpm/better-sqlite3@12.2.0/node_modules/better-sqlite3/lib/util.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/.pnpm/bindings@1.5.0/node_modules/bindings/bindings.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/.pnpm/bindings@1.5.0/node_modules/bindings/bindings.js ***!
  \*****************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __filename = \"/index.js\";\n/**\n * Module dependencies.\n */\n\nvar fs = __webpack_require__(/*! fs */ \"fs\"),\n  path = __webpack_require__(/*! path */ \"path\"),\n  fileURLToPath = __webpack_require__(/*! file-uri-to-path */ \"(middleware)/./node_modules/.pnpm/file-uri-to-path@1.0.0/node_modules/file-uri-to-path/index.js\"),\n  join = path.join,\n  dirname = path.dirname,\n  exists =\n    (fs.accessSync &&\n      function(path) {\n        try {\n          fs.accessSync(path);\n        } catch (e) {\n          return false;\n        }\n        return true;\n      }) ||\n    fs.existsSync ||\n    path.existsSync,\n  defaults = {\n    arrow: process.env.NODE_BINDINGS_ARROW || ' → ',\n    compiled: process.env.NODE_BINDINGS_COMPILED_DIR || 'compiled',\n    platform: process.platform,\n    arch: process.arch,\n    nodePreGyp:\n      'node-v' +\n      process.versions.modules +\n      '-' +\n      process.platform +\n      '-' +\n      process.arch,\n    version: process.versions.node,\n    bindings: 'bindings.node',\n    try: [\n      // node-gyp's linked version in the \"build\" dir\n      ['module_root', 'build', 'bindings'],\n      // node-waf and gyp_addon (a.k.a node-gyp)\n      ['module_root', 'build', 'Debug', 'bindings'],\n      ['module_root', 'build', 'Release', 'bindings'],\n      // Debug files, for development (legacy behavior, remove for node v0.9)\n      ['module_root', 'out', 'Debug', 'bindings'],\n      ['module_root', 'Debug', 'bindings'],\n      // Release files, but manually compiled (legacy behavior, remove for node v0.9)\n      ['module_root', 'out', 'Release', 'bindings'],\n      ['module_root', 'Release', 'bindings'],\n      // Legacy from node-waf, node <= 0.4.x\n      ['module_root', 'build', 'default', 'bindings'],\n      // Production \"Release\" buildtype binary (meh...)\n      ['module_root', 'compiled', 'version', 'platform', 'arch', 'bindings'],\n      // node-qbs builds\n      ['module_root', 'addon-build', 'release', 'install-root', 'bindings'],\n      ['module_root', 'addon-build', 'debug', 'install-root', 'bindings'],\n      ['module_root', 'addon-build', 'default', 'install-root', 'bindings'],\n      // node-pre-gyp path ./lib/binding/{node_abi}-{platform}-{arch}\n      ['module_root', 'lib', 'binding', 'nodePreGyp', 'bindings']\n    ]\n  };\n\n/**\n * The main `bindings()` function loads the compiled bindings for a given module.\n * It uses V8's Error API to determine the parent filename that this function is\n * being invoked from, which is then used to find the root directory.\n */\n\nfunction bindings(opts) {\n  // Argument surgery\n  if (typeof opts == 'string') {\n    opts = { bindings: opts };\n  } else if (!opts) {\n    opts = {};\n  }\n\n  // maps `defaults` onto `opts` object\n  Object.keys(defaults).map(function(i) {\n    if (!(i in opts)) opts[i] = defaults[i];\n  });\n\n  // Get the module root\n  if (!opts.module_root) {\n    opts.module_root = exports.getRoot(exports.getFileName());\n  }\n\n  // Ensure the given bindings name ends with .node\n  if (path.extname(opts.bindings) != '.node') {\n    opts.bindings += '.node';\n  }\n\n  // https://github.com/webpack/webpack/issues/4175#issuecomment-342931035\n  var requireFunc =\n     true\n      ? require\n      : 0;\n\n  var tries = [],\n    i = 0,\n    l = opts.try.length,\n    n,\n    b,\n    err;\n\n  for (; i < l; i++) {\n    n = join.apply(\n      null,\n      opts.try[i].map(function(p) {\n        return opts[p] || p;\n      })\n    );\n    tries.push(n);\n    try {\n      b = opts.path ? requireFunc.resolve(n) : requireFunc(n);\n      if (!opts.path) {\n        b.path = n;\n      }\n      return b;\n    } catch (e) {\n      if (e.code !== 'MODULE_NOT_FOUND' &&\n          e.code !== 'QUALIFIED_PATH_RESOLUTION_FAILED' &&\n          !/not find/i.test(e.message)) {\n        throw e;\n      }\n    }\n  }\n\n  err = new Error(\n    'Could not locate the bindings file. Tried:\\n' +\n      tries\n        .map(function(a) {\n          return opts.arrow + a;\n        })\n        .join('\\n')\n  );\n  err.tries = tries;\n  throw err;\n}\nmodule.exports = exports = bindings;\n\n/**\n * Gets the filename of the JavaScript file that invokes this function.\n * Used to help find the root directory of a module.\n * Optionally accepts an filename argument to skip when searching for the invoking filename\n */\n\nexports.getFileName = function getFileName(calling_file) {\n  var origPST = Error.prepareStackTrace,\n    origSTL = Error.stackTraceLimit,\n    dummy = {},\n    fileName;\n\n  Error.stackTraceLimit = 10;\n\n  Error.prepareStackTrace = function(e, st) {\n    for (var i = 0, l = st.length; i < l; i++) {\n      fileName = st[i].getFileName();\n      if (fileName !== __filename) {\n        if (calling_file) {\n          if (fileName !== calling_file) {\n            return;\n          }\n        } else {\n          return;\n        }\n      }\n    }\n  };\n\n  // run the 'prepareStackTrace' function above\n  Error.captureStackTrace(dummy);\n  dummy.stack;\n\n  // cleanup\n  Error.prepareStackTrace = origPST;\n  Error.stackTraceLimit = origSTL;\n\n  // handle filename that starts with \"file://\"\n  var fileSchema = 'file://';\n  if (fileName.indexOf(fileSchema) === 0) {\n    fileName = fileURLToPath(fileName);\n  }\n\n  return fileName;\n};\n\n/**\n * Gets the root directory of a module, given an arbitrary filename\n * somewhere in the module tree. The \"root directory\" is the directory\n * containing the `package.json` file.\n *\n *   In:  /home/nate/node-native-module/lib/index.js\n *   Out: /home/nate/node-native-module\n */\n\nexports.getRoot = function getRoot(file) {\n  var dir = dirname(file),\n    prev;\n  while (true) {\n    if (dir === '.') {\n      // Avoids an infinite loop in rare cases, like the REPL\n      dir = process.cwd();\n    }\n    if (\n      exists(join(dir, 'package.json')) ||\n      exists(join(dir, 'node_modules'))\n    ) {\n      // Found the 'package.json' file or 'node_modules' dir; we're done\n      return dir;\n    }\n    if (prev === dir) {\n      // Got to the top\n      throw new Error(\n        'Could not find module root given file: \"' +\n          file +\n          '\". Do you have a `package.json` file? '\n      );\n    }\n    // Try the parent dir next\n    prev = dir;\n    dir = join(dir, '..');\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2JpbmRpbmdzQDEuNS4wL25vZGVfbW9kdWxlcy9iaW5kaW5ncy9iaW5kaW5ncy5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBOztBQUVBLFNBQVMsbUJBQU8sQ0FBQyxjQUFJO0FBQ3JCLFNBQVMsbUJBQU8sQ0FBQyxrQkFBTTtBQUN2QixrQkFBa0IsbUJBQU8sQ0FBQyx5SEFBa0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxTQUFTLEVBQUUsU0FBUyxFQUFFO0FBQ2hFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJLEtBQXlDO0FBQzdDLFFBQVEsT0FBdUI7QUFDL0IsUUFBUSxDQUFPOztBQUVmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLE9BQU87QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0EsY0FBYztBQUNkOztBQUVBOztBQUVBO0FBQ0EsbUNBQW1DLE9BQU87QUFDMUM7QUFDQSx1QkFBdUIsVUFBVTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvcm9oYW4vY29kZS9yZWFsdGFsay9ub2RlX21vZHVsZXMvLnBucG0vYmluZGluZ3NAMS41LjAvbm9kZV9tb2R1bGVzL2JpbmRpbmdzL2JpbmRpbmdzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZnMgPSByZXF1aXJlKCdmcycpLFxuICBwYXRoID0gcmVxdWlyZSgncGF0aCcpLFxuICBmaWxlVVJMVG9QYXRoID0gcmVxdWlyZSgnZmlsZS11cmktdG8tcGF0aCcpLFxuICBqb2luID0gcGF0aC5qb2luLFxuICBkaXJuYW1lID0gcGF0aC5kaXJuYW1lLFxuICBleGlzdHMgPVxuICAgIChmcy5hY2Nlc3NTeW5jICYmXG4gICAgICBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZnMuYWNjZXNzU3luYyhwYXRoKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pIHx8XG4gICAgZnMuZXhpc3RzU3luYyB8fFxuICAgIHBhdGguZXhpc3RzU3luYyxcbiAgZGVmYXVsdHMgPSB7XG4gICAgYXJyb3c6IHByb2Nlc3MuZW52Lk5PREVfQklORElOR1NfQVJST1cgfHwgJyDihpIgJyxcbiAgICBjb21waWxlZDogcHJvY2Vzcy5lbnYuTk9ERV9CSU5ESU5HU19DT01QSUxFRF9ESVIgfHwgJ2NvbXBpbGVkJyxcbiAgICBwbGF0Zm9ybTogcHJvY2Vzcy5wbGF0Zm9ybSxcbiAgICBhcmNoOiBwcm9jZXNzLmFyY2gsXG4gICAgbm9kZVByZUd5cDpcbiAgICAgICdub2RlLXYnICtcbiAgICAgIHByb2Nlc3MudmVyc2lvbnMubW9kdWxlcyArXG4gICAgICAnLScgK1xuICAgICAgcHJvY2Vzcy5wbGF0Zm9ybSArXG4gICAgICAnLScgK1xuICAgICAgcHJvY2Vzcy5hcmNoLFxuICAgIHZlcnNpb246IHByb2Nlc3MudmVyc2lvbnMubm9kZSxcbiAgICBiaW5kaW5nczogJ2JpbmRpbmdzLm5vZGUnLFxuICAgIHRyeTogW1xuICAgICAgLy8gbm9kZS1neXAncyBsaW5rZWQgdmVyc2lvbiBpbiB0aGUgXCJidWlsZFwiIGRpclxuICAgICAgWydtb2R1bGVfcm9vdCcsICdidWlsZCcsICdiaW5kaW5ncyddLFxuICAgICAgLy8gbm9kZS13YWYgYW5kIGd5cF9hZGRvbiAoYS5rLmEgbm9kZS1neXApXG4gICAgICBbJ21vZHVsZV9yb290JywgJ2J1aWxkJywgJ0RlYnVnJywgJ2JpbmRpbmdzJ10sXG4gICAgICBbJ21vZHVsZV9yb290JywgJ2J1aWxkJywgJ1JlbGVhc2UnLCAnYmluZGluZ3MnXSxcbiAgICAgIC8vIERlYnVnIGZpbGVzLCBmb3IgZGV2ZWxvcG1lbnQgKGxlZ2FjeSBiZWhhdmlvciwgcmVtb3ZlIGZvciBub2RlIHYwLjkpXG4gICAgICBbJ21vZHVsZV9yb290JywgJ291dCcsICdEZWJ1ZycsICdiaW5kaW5ncyddLFxuICAgICAgWydtb2R1bGVfcm9vdCcsICdEZWJ1ZycsICdiaW5kaW5ncyddLFxuICAgICAgLy8gUmVsZWFzZSBmaWxlcywgYnV0IG1hbnVhbGx5IGNvbXBpbGVkIChsZWdhY3kgYmVoYXZpb3IsIHJlbW92ZSBmb3Igbm9kZSB2MC45KVxuICAgICAgWydtb2R1bGVfcm9vdCcsICdvdXQnLCAnUmVsZWFzZScsICdiaW5kaW5ncyddLFxuICAgICAgWydtb2R1bGVfcm9vdCcsICdSZWxlYXNlJywgJ2JpbmRpbmdzJ10sXG4gICAgICAvLyBMZWdhY3kgZnJvbSBub2RlLXdhZiwgbm9kZSA8PSAwLjQueFxuICAgICAgWydtb2R1bGVfcm9vdCcsICdidWlsZCcsICdkZWZhdWx0JywgJ2JpbmRpbmdzJ10sXG4gICAgICAvLyBQcm9kdWN0aW9uIFwiUmVsZWFzZVwiIGJ1aWxkdHlwZSBiaW5hcnkgKG1laC4uLilcbiAgICAgIFsnbW9kdWxlX3Jvb3QnLCAnY29tcGlsZWQnLCAndmVyc2lvbicsICdwbGF0Zm9ybScsICdhcmNoJywgJ2JpbmRpbmdzJ10sXG4gICAgICAvLyBub2RlLXFicyBidWlsZHNcbiAgICAgIFsnbW9kdWxlX3Jvb3QnLCAnYWRkb24tYnVpbGQnLCAncmVsZWFzZScsICdpbnN0YWxsLXJvb3QnLCAnYmluZGluZ3MnXSxcbiAgICAgIFsnbW9kdWxlX3Jvb3QnLCAnYWRkb24tYnVpbGQnLCAnZGVidWcnLCAnaW5zdGFsbC1yb290JywgJ2JpbmRpbmdzJ10sXG4gICAgICBbJ21vZHVsZV9yb290JywgJ2FkZG9uLWJ1aWxkJywgJ2RlZmF1bHQnLCAnaW5zdGFsbC1yb290JywgJ2JpbmRpbmdzJ10sXG4gICAgICAvLyBub2RlLXByZS1neXAgcGF0aCAuL2xpYi9iaW5kaW5nL3tub2RlX2FiaX0te3BsYXRmb3JtfS17YXJjaH1cbiAgICAgIFsnbW9kdWxlX3Jvb3QnLCAnbGliJywgJ2JpbmRpbmcnLCAnbm9kZVByZUd5cCcsICdiaW5kaW5ncyddXG4gICAgXVxuICB9O1xuXG4vKipcbiAqIFRoZSBtYWluIGBiaW5kaW5ncygpYCBmdW5jdGlvbiBsb2FkcyB0aGUgY29tcGlsZWQgYmluZGluZ3MgZm9yIGEgZ2l2ZW4gbW9kdWxlLlxuICogSXQgdXNlcyBWOCdzIEVycm9yIEFQSSB0byBkZXRlcm1pbmUgdGhlIHBhcmVudCBmaWxlbmFtZSB0aGF0IHRoaXMgZnVuY3Rpb24gaXNcbiAqIGJlaW5nIGludm9rZWQgZnJvbSwgd2hpY2ggaXMgdGhlbiB1c2VkIHRvIGZpbmQgdGhlIHJvb3QgZGlyZWN0b3J5LlxuICovXG5cbmZ1bmN0aW9uIGJpbmRpbmdzKG9wdHMpIHtcbiAgLy8gQXJndW1lbnQgc3VyZ2VyeVxuICBpZiAodHlwZW9mIG9wdHMgPT0gJ3N0cmluZycpIHtcbiAgICBvcHRzID0geyBiaW5kaW5nczogb3B0cyB9O1xuICB9IGVsc2UgaWYgKCFvcHRzKSB7XG4gICAgb3B0cyA9IHt9O1xuICB9XG5cbiAgLy8gbWFwcyBgZGVmYXVsdHNgIG9udG8gYG9wdHNgIG9iamVjdFxuICBPYmplY3Qua2V5cyhkZWZhdWx0cykubWFwKGZ1bmN0aW9uKGkpIHtcbiAgICBpZiAoIShpIGluIG9wdHMpKSBvcHRzW2ldID0gZGVmYXVsdHNbaV07XG4gIH0pO1xuXG4gIC8vIEdldCB0aGUgbW9kdWxlIHJvb3RcbiAgaWYgKCFvcHRzLm1vZHVsZV9yb290KSB7XG4gICAgb3B0cy5tb2R1bGVfcm9vdCA9IGV4cG9ydHMuZ2V0Um9vdChleHBvcnRzLmdldEZpbGVOYW1lKCkpO1xuICB9XG5cbiAgLy8gRW5zdXJlIHRoZSBnaXZlbiBiaW5kaW5ncyBuYW1lIGVuZHMgd2l0aCAubm9kZVxuICBpZiAocGF0aC5leHRuYW1lKG9wdHMuYmluZGluZ3MpICE9ICcubm9kZScpIHtcbiAgICBvcHRzLmJpbmRpbmdzICs9ICcubm9kZSc7XG4gIH1cblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay93ZWJwYWNrL2lzc3Vlcy80MTc1I2lzc3VlY29tbWVudC0zNDI5MzEwMzVcbiAgdmFyIHJlcXVpcmVGdW5jID1cbiAgICB0eXBlb2YgX193ZWJwYWNrX3JlcXVpcmVfXyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBfX25vbl93ZWJwYWNrX3JlcXVpcmVfX1xuICAgICAgOiByZXF1aXJlO1xuXG4gIHZhciB0cmllcyA9IFtdLFxuICAgIGkgPSAwLFxuICAgIGwgPSBvcHRzLnRyeS5sZW5ndGgsXG4gICAgbixcbiAgICBiLFxuICAgIGVycjtcblxuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIG4gPSBqb2luLmFwcGx5KFxuICAgICAgbnVsbCxcbiAgICAgIG9wdHMudHJ5W2ldLm1hcChmdW5jdGlvbihwKSB7XG4gICAgICAgIHJldHVybiBvcHRzW3BdIHx8IHA7XG4gICAgICB9KVxuICAgICk7XG4gICAgdHJpZXMucHVzaChuKTtcbiAgICB0cnkge1xuICAgICAgYiA9IG9wdHMucGF0aCA/IHJlcXVpcmVGdW5jLnJlc29sdmUobikgOiByZXF1aXJlRnVuYyhuKTtcbiAgICAgIGlmICghb3B0cy5wYXRoKSB7XG4gICAgICAgIGIucGF0aCA9IG47XG4gICAgICB9XG4gICAgICByZXR1cm4gYjtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5jb2RlICE9PSAnTU9EVUxFX05PVF9GT1VORCcgJiZcbiAgICAgICAgICBlLmNvZGUgIT09ICdRVUFMSUZJRURfUEFUSF9SRVNPTFVUSU9OX0ZBSUxFRCcgJiZcbiAgICAgICAgICAhL25vdCBmaW5kL2kudGVzdChlLm1lc3NhZ2UpKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZXJyID0gbmV3IEVycm9yKFxuICAgICdDb3VsZCBub3QgbG9jYXRlIHRoZSBiaW5kaW5ncyBmaWxlLiBUcmllZDpcXG4nICtcbiAgICAgIHRyaWVzXG4gICAgICAgIC5tYXAoZnVuY3Rpb24oYSkge1xuICAgICAgICAgIHJldHVybiBvcHRzLmFycm93ICsgYTtcbiAgICAgICAgfSlcbiAgICAgICAgLmpvaW4oJ1xcbicpXG4gICk7XG4gIGVyci50cmllcyA9IHRyaWVzO1xuICB0aHJvdyBlcnI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBiaW5kaW5ncztcblxuLyoqXG4gKiBHZXRzIHRoZSBmaWxlbmFtZSBvZiB0aGUgSmF2YVNjcmlwdCBmaWxlIHRoYXQgaW52b2tlcyB0aGlzIGZ1bmN0aW9uLlxuICogVXNlZCB0byBoZWxwIGZpbmQgdGhlIHJvb3QgZGlyZWN0b3J5IG9mIGEgbW9kdWxlLlxuICogT3B0aW9uYWxseSBhY2NlcHRzIGFuIGZpbGVuYW1lIGFyZ3VtZW50IHRvIHNraXAgd2hlbiBzZWFyY2hpbmcgZm9yIHRoZSBpbnZva2luZyBmaWxlbmFtZVxuICovXG5cbmV4cG9ydHMuZ2V0RmlsZU5hbWUgPSBmdW5jdGlvbiBnZXRGaWxlTmFtZShjYWxsaW5nX2ZpbGUpIHtcbiAgdmFyIG9yaWdQU1QgPSBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSxcbiAgICBvcmlnU1RMID0gRXJyb3Iuc3RhY2tUcmFjZUxpbWl0LFxuICAgIGR1bW15ID0ge30sXG4gICAgZmlsZU5hbWU7XG5cbiAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gMTA7XG5cbiAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSBmdW5jdGlvbihlLCBzdCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmaWxlTmFtZSA9IHN0W2ldLmdldEZpbGVOYW1lKCk7XG4gICAgICBpZiAoZmlsZU5hbWUgIT09IF9fZmlsZW5hbWUpIHtcbiAgICAgICAgaWYgKGNhbGxpbmdfZmlsZSkge1xuICAgICAgICAgIGlmIChmaWxlTmFtZSAhPT0gY2FsbGluZ19maWxlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBydW4gdGhlICdwcmVwYXJlU3RhY2tUcmFjZScgZnVuY3Rpb24gYWJvdmVcbiAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZHVtbXkpO1xuICBkdW1teS5zdGFjaztcblxuICAvLyBjbGVhbnVwXG4gIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gb3JpZ1BTVDtcbiAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gb3JpZ1NUTDtcblxuICAvLyBoYW5kbGUgZmlsZW5hbWUgdGhhdCBzdGFydHMgd2l0aCBcImZpbGU6Ly9cIlxuICB2YXIgZmlsZVNjaGVtYSA9ICdmaWxlOi8vJztcbiAgaWYgKGZpbGVOYW1lLmluZGV4T2YoZmlsZVNjaGVtYSkgPT09IDApIHtcbiAgICBmaWxlTmFtZSA9IGZpbGVVUkxUb1BhdGgoZmlsZU5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIGZpbGVOYW1lO1xufTtcblxuLyoqXG4gKiBHZXRzIHRoZSByb290IGRpcmVjdG9yeSBvZiBhIG1vZHVsZSwgZ2l2ZW4gYW4gYXJiaXRyYXJ5IGZpbGVuYW1lXG4gKiBzb21ld2hlcmUgaW4gdGhlIG1vZHVsZSB0cmVlLiBUaGUgXCJyb290IGRpcmVjdG9yeVwiIGlzIHRoZSBkaXJlY3RvcnlcbiAqIGNvbnRhaW5pbmcgdGhlIGBwYWNrYWdlLmpzb25gIGZpbGUuXG4gKlxuICogICBJbjogIC9ob21lL25hdGUvbm9kZS1uYXRpdmUtbW9kdWxlL2xpYi9pbmRleC5qc1xuICogICBPdXQ6IC9ob21lL25hdGUvbm9kZS1uYXRpdmUtbW9kdWxlXG4gKi9cblxuZXhwb3J0cy5nZXRSb290ID0gZnVuY3Rpb24gZ2V0Um9vdChmaWxlKSB7XG4gIHZhciBkaXIgPSBkaXJuYW1lKGZpbGUpLFxuICAgIHByZXY7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKGRpciA9PT0gJy4nKSB7XG4gICAgICAvLyBBdm9pZHMgYW4gaW5maW5pdGUgbG9vcCBpbiByYXJlIGNhc2VzLCBsaWtlIHRoZSBSRVBMXG4gICAgICBkaXIgPSBwcm9jZXNzLmN3ZCgpO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICBleGlzdHMoam9pbihkaXIsICdwYWNrYWdlLmpzb24nKSkgfHxcbiAgICAgIGV4aXN0cyhqb2luKGRpciwgJ25vZGVfbW9kdWxlcycpKVxuICAgICkge1xuICAgICAgLy8gRm91bmQgdGhlICdwYWNrYWdlLmpzb24nIGZpbGUgb3IgJ25vZGVfbW9kdWxlcycgZGlyOyB3ZSdyZSBkb25lXG4gICAgICByZXR1cm4gZGlyO1xuICAgIH1cbiAgICBpZiAocHJldiA9PT0gZGlyKSB7XG4gICAgICAvLyBHb3QgdG8gdGhlIHRvcFxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQ291bGQgbm90IGZpbmQgbW9kdWxlIHJvb3QgZ2l2ZW4gZmlsZTogXCInICtcbiAgICAgICAgICBmaWxlICtcbiAgICAgICAgICAnXCIuIERvIHlvdSBoYXZlIGEgYHBhY2thZ2UuanNvbmAgZmlsZT8gJ1xuICAgICAgKTtcbiAgICB9XG4gICAgLy8gVHJ5IHRoZSBwYXJlbnQgZGlyIG5leHRcbiAgICBwcmV2ID0gZGlyO1xuICAgIGRpciA9IGpvaW4oZGlyLCAnLi4nKTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/.pnpm/bindings@1.5.0/node_modules/bindings/bindings.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/.pnpm/file-uri-to-path@1.0.0/node_modules/file-uri-to-path/index.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/file-uri-to-path@1.0.0/node_modules/file-uri-to-path/index.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * Module dependencies.\n */\n\nvar sep = (__webpack_require__(/*! path */ \"path\").sep) || '/';\n\n/**\n * Module exports.\n */\n\nmodule.exports = fileUriToPath;\n\n/**\n * File URI to Path function.\n *\n * @param {String} uri\n * @return {String} path\n * @api public\n */\n\nfunction fileUriToPath (uri) {\n  if ('string' != typeof uri ||\n      uri.length <= 7 ||\n      'file://' != uri.substring(0, 7)) {\n    throw new TypeError('must pass in a file:// URI to convert to a file path');\n  }\n\n  var rest = decodeURI(uri.substring(7));\n  var firstSlash = rest.indexOf('/');\n  var host = rest.substring(0, firstSlash);\n  var path = rest.substring(firstSlash + 1);\n\n  // 2.  Scheme Definition\n  // As a special case, <host> can be the string \"localhost\" or the empty\n  // string; this is interpreted as \"the machine from which the URL is\n  // being interpreted\".\n  if ('localhost' == host) host = '';\n\n  if (host) {\n    host = sep + sep + host;\n  }\n\n  // 3.2  Drives, drive letters, mount points, file system root\n  // Drive letters are mapped into the top of a file URI in various ways,\n  // depending on the implementation; some applications substitute\n  // vertical bar (\"|\") for the colon after the drive letter, yielding\n  // \"file:///c|/tmp/test.txt\".  In some cases, the colon is left\n  // unchanged, as in \"file:///c:/tmp/test.txt\".  In other cases, the\n  // colon is simply omitted, as in \"file:///c/tmp/test.txt\".\n  path = path.replace(/^(.+)\\|/, '$1:');\n\n  // for Windows, we need to invert the path separators from what a URI uses\n  if (sep == '\\\\') {\n    path = path.replace(/\\//g, '\\\\');\n  }\n\n  if (/^.+\\:/.test(path)) {\n    // has Windows drive at beginning of path\n  } else {\n    // unix path…\n    path = sep + path;\n  }\n\n  return host + path;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZpbGUtdXJpLXRvLXBhdGhAMS4wLjAvbm9kZV9tb2R1bGVzL2ZpbGUtdXJpLXRvLXBhdGgvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLDZDQUFtQjs7QUFFN0I7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLFFBQVE7QUFDcEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3JvaGFuL2NvZGUvcmVhbHRhbGsvbm9kZV9tb2R1bGVzLy5wbnBtL2ZpbGUtdXJpLXRvLXBhdGhAMS4wLjAvbm9kZV9tb2R1bGVzL2ZpbGUtdXJpLXRvLXBhdGgvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHNlcCA9IHJlcXVpcmUoJ3BhdGgnKS5zZXAgfHwgJy8nO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZmlsZVVyaVRvUGF0aDtcblxuLyoqXG4gKiBGaWxlIFVSSSB0byBQYXRoIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmlcbiAqIEByZXR1cm4ge1N0cmluZ30gcGF0aFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmaWxlVXJpVG9QYXRoICh1cmkpIHtcbiAgaWYgKCdzdHJpbmcnICE9IHR5cGVvZiB1cmkgfHxcbiAgICAgIHVyaS5sZW5ndGggPD0gNyB8fFxuICAgICAgJ2ZpbGU6Ly8nICE9IHVyaS5zdWJzdHJpbmcoMCwgNykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtdXN0IHBhc3MgaW4gYSBmaWxlOi8vIFVSSSB0byBjb252ZXJ0IHRvIGEgZmlsZSBwYXRoJyk7XG4gIH1cblxuICB2YXIgcmVzdCA9IGRlY29kZVVSSSh1cmkuc3Vic3RyaW5nKDcpKTtcbiAgdmFyIGZpcnN0U2xhc2ggPSByZXN0LmluZGV4T2YoJy8nKTtcbiAgdmFyIGhvc3QgPSByZXN0LnN1YnN0cmluZygwLCBmaXJzdFNsYXNoKTtcbiAgdmFyIHBhdGggPSByZXN0LnN1YnN0cmluZyhmaXJzdFNsYXNoICsgMSk7XG5cbiAgLy8gMi4gIFNjaGVtZSBEZWZpbml0aW9uXG4gIC8vIEFzIGEgc3BlY2lhbCBjYXNlLCA8aG9zdD4gY2FuIGJlIHRoZSBzdHJpbmcgXCJsb2NhbGhvc3RcIiBvciB0aGUgZW1wdHlcbiAgLy8gc3RyaW5nOyB0aGlzIGlzIGludGVycHJldGVkIGFzIFwidGhlIG1hY2hpbmUgZnJvbSB3aGljaCB0aGUgVVJMIGlzXG4gIC8vIGJlaW5nIGludGVycHJldGVkXCIuXG4gIGlmICgnbG9jYWxob3N0JyA9PSBob3N0KSBob3N0ID0gJyc7XG5cbiAgaWYgKGhvc3QpIHtcbiAgICBob3N0ID0gc2VwICsgc2VwICsgaG9zdDtcbiAgfVxuXG4gIC8vIDMuMiAgRHJpdmVzLCBkcml2ZSBsZXR0ZXJzLCBtb3VudCBwb2ludHMsIGZpbGUgc3lzdGVtIHJvb3RcbiAgLy8gRHJpdmUgbGV0dGVycyBhcmUgbWFwcGVkIGludG8gdGhlIHRvcCBvZiBhIGZpbGUgVVJJIGluIHZhcmlvdXMgd2F5cyxcbiAgLy8gZGVwZW5kaW5nIG9uIHRoZSBpbXBsZW1lbnRhdGlvbjsgc29tZSBhcHBsaWNhdGlvbnMgc3Vic3RpdHV0ZVxuICAvLyB2ZXJ0aWNhbCBiYXIgKFwifFwiKSBmb3IgdGhlIGNvbG9uIGFmdGVyIHRoZSBkcml2ZSBsZXR0ZXIsIHlpZWxkaW5nXG4gIC8vIFwiZmlsZTovLy9jfC90bXAvdGVzdC50eHRcIi4gIEluIHNvbWUgY2FzZXMsIHRoZSBjb2xvbiBpcyBsZWZ0XG4gIC8vIHVuY2hhbmdlZCwgYXMgaW4gXCJmaWxlOi8vL2M6L3RtcC90ZXN0LnR4dFwiLiAgSW4gb3RoZXIgY2FzZXMsIHRoZVxuICAvLyBjb2xvbiBpcyBzaW1wbHkgb21pdHRlZCwgYXMgaW4gXCJmaWxlOi8vL2MvdG1wL3Rlc3QudHh0XCIuXG4gIHBhdGggPSBwYXRoLnJlcGxhY2UoL14oLispXFx8LywgJyQxOicpO1xuXG4gIC8vIGZvciBXaW5kb3dzLCB3ZSBuZWVkIHRvIGludmVydCB0aGUgcGF0aCBzZXBhcmF0b3JzIGZyb20gd2hhdCBhIFVSSSB1c2VzXG4gIGlmIChzZXAgPT0gJ1xcXFwnKSB7XG4gICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXFwvL2csICdcXFxcJyk7XG4gIH1cblxuICBpZiAoL14uK1xcOi8udGVzdChwYXRoKSkge1xuICAgIC8vIGhhcyBXaW5kb3dzIGRyaXZlIGF0IGJlZ2lubmluZyBvZiBwYXRoXG4gIH0gZWxzZSB7XG4gICAgLy8gdW5peCBwYXRo4oCmXG4gICAgcGF0aCA9IHNlcCArIHBhdGg7XG4gIH1cblxuICByZXR1cm4gaG9zdCArIHBhdGg7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/.pnpm/file-uri-to-path@1.0.0/node_modules/file-uri-to-path/index.js\n");

/***/ }),

/***/ "fs":
/*!********************************************************!*\
  !*** external "globalThis.__import_unsupported('fs')" ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
module.exports = globalThis.__import_unsupported('fs');

/***/ }),

/***/ "path":
/*!**********************************************************!*\
  !*** external "globalThis.__import_unsupported('path')" ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
module.exports = globalThis.__import_unsupported('path');

/***/ }),

/***/ "util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:util");

/***/ })

});