"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("middleware",{

/***/ "(middleware)/./lib/db.ts":
/*!*******************!*\
  !*** ./lib/db.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addMessageReaction: () => (/* binding */ addMessageReaction),\n/* harmony export */   approveJoinRequest: () => (/* binding */ approveJoinRequest),\n/* harmony export */   clearUserFrozen: () => (/* binding */ clearUserFrozen),\n/* harmony export */   createFriendship: () => (/* binding */ createFriendship),\n/* harmony export */   createGroupChat: () => (/* binding */ createGroupChat),\n/* harmony export */   createJoinRequest: () => (/* binding */ createJoinRequest),\n/* harmony export */   createMessage: () => (/* binding */ createMessage),\n/* harmony export */   createNotification: () => (/* binding */ createNotification),\n/* harmony export */   createUser: () => (/* binding */ createUser),\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   deleteGroupChat: () => (/* binding */ deleteGroupChat),\n/* harmony export */   getAcceptedFriends: () => (/* binding */ getAcceptedFriends),\n/* harmony export */   getFriendships: () => (/* binding */ getFriendships),\n/* harmony export */   getGroupChatByShortCode: () => (/* binding */ getGroupChatByShortCode),\n/* harmony export */   getMessages: () => (/* binding */ getMessages),\n/* harmony export */   getOnlineUsers: () => (/* binding */ getOnlineUsers),\n/* harmony export */   getPendingJoinRequests: () => (/* binding */ getPendingJoinRequests),\n/* harmony export */   getUnreadNotifications: () => (/* binding */ getUnreadNotifications),\n/* harmony export */   getUserById: () => (/* binding */ getUserById),\n/* harmony export */   getUserByUsername: () => (/* binding */ getUserByUsername),\n/* harmony export */   getUserDMs: () => (/* binding */ getUserDMs),\n/* harmony export */   getUserFreezeStatus: () => (/* binding */ getUserFreezeStatus),\n/* harmony export */   getUserGroupChats: () => (/* binding */ getUserGroupChats),\n/* harmony export */   markNotificationAsRead: () => (/* binding */ markNotificationAsRead),\n/* harmony export */   query: () => (/* binding */ query),\n/* harmony export */   rejectJoinRequest: () => (/* binding */ rejectJoinRequest),\n/* harmony export */   removeMessageReaction: () => (/* binding */ removeMessageReaction),\n/* harmony export */   searchUsers: () => (/* binding */ searchUsers),\n/* harmony export */   setUserFrozen: () => (/* binding */ setUserFrozen),\n/* harmony export */   updateFriendshipStatus: () => (/* binding */ updateFriendshipStatus),\n/* harmony export */   updateUserActivity: () => (/* binding */ updateUserActivity),\n/* harmony export */   updateUserSettings: () => (/* binding */ updateUserSettings)\n/* harmony export */ });\n/* harmony import */ var server_only__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! server-only */ \"(middleware)/./node_modules/.pnpm/next@15.2.4_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/server-only/empty.js\");\n/* harmony import */ var server_only__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(server_only__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @neondatabase/serverless */ \"(middleware)/./node_modules/.pnpm/@neondatabase+serverless@1.0.1/node_modules/@neondatabase/serverless/index.mjs\");\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/constants */ \"(middleware)/./lib/constants.ts\");\n\n\n\nconst sql = (0,_neondatabase_serverless__WEBPACK_IMPORTED_MODULE_1__.neon)(process.env.DATABASE_URL);\nconst query = sql;\nconst db = sql;\n// Database helper functions\nasync function createUser(username, passwordHash, signupCode) {\n    try {\n        let nameColor = null;\n        const customTitle = null;\n        let hasGoldAnimation = false;\n        if (signupCode === \"asdf\") {\n            nameColor = \"#6366f1\";\n        } else if (signupCode === \"qwea\") {\n            hasGoldAnimation = true;\n        }\n        const result = await sql`\n      INSERT INTO users (username, password_hash, signup_code, name_color, has_gold_animation, email, last_active, theme, hue, ui_mode)\n      VALUES (${username}, ${passwordHash}, ${signupCode}, ${nameColor}, ${hasGoldAnimation}, NULL, NOW(), 'light', 'blue', 'full')\n      RETURNING id, username, email, signup_code, name_color, custom_title, has_gold_animation, notifications_enabled, theme, hue, profile_picture, bio, ui_mode\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] createUser error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function getUserByUsername(username) {\n    try {\n        const rows = await sql`\n      SELECT *\n      FROM users\n      WHERE username = ${username}\n      LIMIT 1\n    `;\n        return rows[0];\n    } catch (err) {\n        console.error(\"[db] getUserByUsername error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function getUserById(id) {\n    try {\n        const result = await sql`\n      SELECT id, username, email, signup_code, name_color, custom_title, has_gold_animation, \n             notifications_enabled, theme, hue, profile_picture, bio, ui_mode\n      FROM users WHERE id = ${id}\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] getUserById error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function updateUserActivity(userId) {\n    try {\n        await sql`\n      UPDATE users \n      SET last_active = NOW()\n      WHERE id = ${userId}\n    `;\n        return true;\n    } catch (err) {\n        console.error(\"[db] updateUserActivity error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function getOnlineUsers(currentUserId) {\n    try {\n        const result = await sql`\n      SELECT DISTINCT u.id, u.username, u.name_color, u.has_gold_animation, u.last_active\n      FROM users u\n      JOIN friendships f ON (\n        (f.requester_id = ${currentUserId} AND f.addressee_id = u.id) OR\n        (f.addressee_id = ${currentUserId} AND f.requester_id = u.id)\n      )\n      WHERE u.last_active > NOW() - INTERVAL '10 minutes'\n      AND f.status = 'accepted'\n      AND u.id != ${currentUserId}\n      AND u.id != ${_lib_constants__WEBPACK_IMPORTED_MODULE_2__.AI_USER_ID}\n      ORDER BY u.username\n    `;\n        return result;\n    } catch (err) {\n        console.error(\"[db] getOnlineUsers error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function searchUsers(searchQuery, currentUserId) {\n    try {\n        const result = await sql`\n      SELECT id, username, name_color, custom_title, has_gold_animation\n      FROM users \n      WHERE username ILIKE ${`%${searchQuery}%`} \n      AND id != ${currentUserId}\n      AND id != ${_lib_constants__WEBPACK_IMPORTED_MODULE_2__.AI_USER_ID}\n      LIMIT 10\n    `;\n        return result;\n    } catch (err) {\n        console.error(\"[db] searchUsers error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function getMessages(chatType, chatId, userId, limit = 50) {\n    try {\n        if (chatType === \"global\") {\n            const result = await sql`\n        SELECT m.*, u.username, u.name_color, u.custom_title, u.has_gold_animation,\n               COALESCE(\n                 json_agg(\n                   json_build_object(\n                     'emoji', mr.emoji,\n                     'count', mr.reaction_count,\n                     'reacted_by_me', CASE WHEN mr.user_reacted THEN true ELSE false END\n                   )\n                 ) FILTER (WHERE mr.emoji IS NOT NULL), \n                 '[]'::json\n               ) as reactions,\n               pm.content AS parent_message_content,\n               pu.username AS parent_message_username\n        FROM messages m\n        JOIN users u ON m.sender_id = u.id\n        LEFT JOIN (\n          SELECT \n            message_id,\n            emoji,\n            COUNT(*) as reaction_count,\n            BOOL_OR(user_id = ${userId || null}) as user_reacted\n          FROM message_reactions\n          GROUP BY message_id, emoji\n        ) mr ON m.id = mr.message_id\n        LEFT JOIN messages pm ON m.parent_message_id = pm.id\n        LEFT JOIN users pu ON pm.sender_id = pu.id\n        WHERE m.chat_type = 'global'\n        GROUP BY m.id, u.username, u.name_color, u.custom_title, u.has_gold_animation, pm.content, pu.username\n        ORDER BY m.created_at DESC\n        LIMIT ${limit}\n      `;\n            return result.reverse();\n        } else if (chatType === \"dm\") {\n            const result = await sql`\n        SELECT m.*, u.username, u.name_color, u.custom_title, u.has_gold_animation,\n               COALESCE(\n                 json_agg(\n                   json_build_object(\n                     'emoji', mr.emoji,\n                     'count', mr.reaction_count,\n                     'reacted_by_me', CASE WHEN mr.user_reacted THEN true ELSE false END\n                   )\n                 ) FILTER (WHERE mr.emoji IS NOT NULL), \n                 '[]'::json\n               ) as reactions,\n               pm.content AS parent_message_content,\n               pu.username AS parent_message_username\n        FROM messages m\n        JOIN users u ON m.sender_id = u.id\n        LEFT JOIN (\n          SELECT \n            message_id,\n            emoji,\n            COUNT(*) as reaction_count,\n            BOOL_OR(user_id = ${userId || null}) as user_reacted\n          FROM message_reactions\n          GROUP BY message_id, emoji\n        ) mr ON m.id = mr.message_id\n        LEFT JOIN messages pm ON m.parent_message_id = pm.id\n        LEFT JOIN users pu ON pm.sender_id = pu.id\n        WHERE m.chat_type = 'dm' \n          AND ((m.sender_id = ${userId} AND m.chat_id = ${chatId}) \n               OR (m.sender_id = ${chatId} AND m.chat_id = ${userId}))\n        GROUP BY m.id, u.username, u.name_color, u.custom_title, u.has_gold_animation, pm.content, pu.username\n        ORDER BY m.created_at DESC\n        LIMIT ${limit}\n      `;\n            return result.reverse();\n        } else if (chatType === \"channel\") {\n            const result = await sql`\n        SELECT m.*, u.username, u.name_color, u.custom_title, u.has_gold_animation,\n               COALESCE(\n                 json_agg(\n                   json_build_object(\n                     'emoji', mr.emoji,\n                     'count', mr.reaction_count,\n                     'reacted_by_me', CASE WHEN mr.user_reacted THEN true ELSE false END\n                   )\n                 ) FILTER (WHERE mr.emoji IS NOT NULL), \n                 '[]'::json\n               ) as reactions,\n               pm.content AS parent_message_content,\n               pu.username AS parent_message_username\n        FROM messages m\n        JOIN users u ON m.sender_id = u.id\n        LEFT JOIN (\n          SELECT \n            message_id,\n            emoji,\n            COUNT(*) as reaction_count,\n            BOOL_OR(user_id = ${userId || null}) as user_reacted\n          FROM message_reactions\n          GROUP BY message_id, emoji\n        ) mr ON m.id = mr.message_id\n        LEFT JOIN messages pm ON m.parent_message_id = pm.id\n        LEFT JOIN users pu ON pm.sender_id = pu.id\n        WHERE m.chat_type = 'channel' AND m.chat_id = ${chatId}\n        GROUP BY m.id, u.username, u.name_color, u.custom_title, u.has_gold_animation, pm.content, pu.username\n        ORDER BY m.created_at DESC\n        LIMIT ${limit}\n      `;\n            return result.reverse();\n        } else {\n            const result = await sql`\n        SELECT m.*, u.username, u.name_color, u.custom_title, u.has_gold_animation,\n               COALESCE(\n                 json_agg(\n                   json_build_object(\n                     'emoji', mr.emoji,\n                     'count', mr.reaction_count,\n                     'reacted_by_me', CASE WHEN mr.user_reacted THEN true ELSE false END\n                   )\n                 ) FILTER (WHERE mr.emoji IS NOT NULL), \n                 '[]'::json\n               ) as reactions,\n               pm.content AS parent_message_content,\n               pu.username AS parent_message_username\n        FROM messages m\n        JOIN users u ON m.sender_id = u.id\n        LEFT JOIN (\n          SELECT \n            message_id,\n            emoji,\n            COUNT(*) as reaction_count,\n            BOOL_OR(user_id = ${userId || null}) as user_reacted\n          FROM message_reactions\n          GROUP BY message_id, emoji\n        ) mr ON m.id = mr.message_id\n        LEFT JOIN messages pm ON m.parent_message_id = pm.id\n        LEFT JOIN users pu ON pm.sender_id = pu.id\n        WHERE m.chat_type = ${chatType} AND m.chat_id = ${chatId}\n        GROUP BY m.id, u.username, u.name_color, u.custom_title, u.has_gold_animation, pm.content, pu.username\n        ORDER BY m.created_at DESC\n        LIMIT ${limit}\n      `;\n            return result.reverse();\n        }\n    } catch (err) {\n        console.error(\"[db] getMessages error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function createMessage(senderId, content, chatType, chatId, mentions = [], isAiResponse = false, parentMessageId, messageType = \"text\") {\n    try {\n        const result = await sql`\n      INSERT INTO messages (sender_id, content, chat_type, chat_id, mentions, is_ai_response, parent_message_id, message_type)\n      VALUES (${senderId}, ${content}, ${chatType}, ${chatId}, ${mentions}, ${isAiResponse}, ${parentMessageId}, ${messageType})\n      RETURNING *\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] createMessage error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\n// Generate a random short code\nfunction generateShortCode() {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for(let i = 0; i < 6; i++){\n        result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n}\nasync function createGroupChat(name, creatorId, memberIds = []) {\n    try {\n        // Generate a unique short code\n        let shortCode;\n        let attempts = 0;\n        let existing;\n        do {\n            shortCode = generateShortCode();\n            existing = await sql`SELECT id FROM group_chats WHERE short_code = ${shortCode}`;\n            attempts++;\n            if (attempts > 10) {\n                throw new Error(\"Failed to generate unique short code\");\n            }\n        }while (existing.length > 0);\n        const result = await sql`\n      INSERT INTO group_chats (name, creator_id, short_code)\n      VALUES (${name}, ${creatorId}, ${shortCode})\n      RETURNING *\n    `;\n        await sql`\n      INSERT INTO group_chat_members (group_chat_id, user_id)\n      VALUES (${result[0].id}, ${creatorId})\n    `;\n        for (const memberId of memberIds){\n            if (memberId !== creatorId) {\n                await sql`\n          INSERT INTO group_chat_members (group_chat_id, user_id)\n          VALUES (${result[0].id}, ${memberId})\n          ON CONFLICT (group_chat_id, user_id) DO NOTHING\n        `;\n            }\n        }\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] createGroupChat error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function getUserGroupChats(userId) {\n    try {\n        const result = await sql`\n      SELECT gc.*, u.username as creator_username\n      FROM group_chats gc\n      JOIN group_chat_members gcm ON gc.id = gcm.group_chat_id\n      JOIN users u ON gc.creator_id = u.id\n      WHERE gcm.user_id = ${userId}\n      ORDER BY gc.updated_at DESC\n    `;\n        return result;\n    } catch (err) {\n        console.error(\"[db] getUserGroupChats error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function getGroupChatByShortCode(shortCode) {\n    try {\n        const result = await sql`\n      SELECT gc.*, u.username as creator_username\n      FROM group_chats gc\n      JOIN users u ON gc.creator_id = u.id\n      WHERE gc.short_code = ${shortCode}\n      LIMIT 1\n    `;\n        return result[0] || null;\n    } catch (err) {\n        console.error(\"[db] getGroupChatByShortCode error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function createJoinRequest(groupChatId, requesterId) {\n    try {\n        // Check if user is already a member\n        const existingMember = await sql`\n      SELECT id FROM group_chat_members \n      WHERE group_chat_id = ${groupChatId} AND user_id = ${requesterId}\n    `;\n        if (existingMember.length > 0) {\n            throw new Error(\"Already a member of this group chat\");\n        }\n        // Check if there's already a pending request\n        const existingRequest = await sql`\n      SELECT id FROM group_join_requests \n      WHERE group_chat_id = ${groupChatId} AND requester_id = ${requesterId}\n    `;\n        if (existingRequest.length > 0) {\n            throw new Error(\"Join request already pending\");\n        }\n        const result = await sql`\n      INSERT INTO group_join_requests (group_chat_id, requester_id, status)\n      VALUES (${groupChatId}, ${requesterId}, 'pending')\n      RETURNING *\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] createJoinRequest error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function getPendingJoinRequests(groupChatId) {\n    try {\n        const result = await sql`\n      SELECT gjr.*, u.username, u.name_color, u.custom_title, u.has_gold_animation\n      FROM group_join_requests gjr\n      JOIN users u ON gjr.requester_id = u.id\n      WHERE gjr.group_chat_id = ${groupChatId} AND gjr.status = 'pending'\n      ORDER BY gjr.created_at ASC\n    `;\n        return result;\n    } catch (err) {\n        console.error(\"[db] getPendingJoinRequests error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function approveJoinRequest(requestId, groupChatId, requesterId) {\n    try {\n        await sql`BEGIN`;\n        // Update the request status\n        await sql`\n      UPDATE group_join_requests \n      SET status = 'approved', updated_at = NOW()\n      WHERE id = ${requestId}\n    `;\n        // Add user to group chat members\n        await sql`\n      INSERT INTO group_chat_members (group_chat_id, user_id)\n      VALUES (${groupChatId}, ${requesterId})\n      ON CONFLICT (group_chat_id, user_id) DO NOTHING\n    `;\n        await sql`COMMIT`;\n        return true;\n    } catch (err) {\n        await sql`ROLLBACK`;\n        console.error(\"[db] approveJoinRequest error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function rejectJoinRequest(requestId) {\n    try {\n        const result = await sql`\n      UPDATE group_join_requests \n      SET status = 'rejected', updated_at = NOW()\n      WHERE id = ${requestId}\n      RETURNING *\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] rejectJoinRequest error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function deleteGroupChat(groupId, creatorId) {\n    try {\n        const chat = await sql`SELECT creator_id FROM group_chats WHERE id = ${groupId}`;\n        if (!chat[0] || chat[0].creator_id !== creatorId) {\n            throw new Error(\"Unauthorized to delete this group chat.\");\n        }\n        await sql`BEGIN`;\n        await sql`DELETE FROM messages WHERE chat_type = 'group' AND chat_id = ${groupId}`;\n        await sql`DELETE FROM group_chat_members WHERE group_chat_id = ${groupId}`;\n        await sql`DELETE FROM group_chats WHERE id = ${groupId}`;\n        await sql`COMMIT`;\n        return true;\n    } catch (err) {\n        await sql`ROLLBACK`;\n        console.error(\"[db] deleteGroupChat error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function createFriendship(requesterId, addresseeId) {\n    try {\n        if (requesterId === addresseeId) {\n            throw new Error(\"Cannot send friend request to yourself.\");\n        }\n        const existing = await sql`\n      SELECT * FROM friendships\n      WHERE (requester_id = ${requesterId} AND addressee_id = ${addresseeId})\n         OR (requester_id = ${addresseeId} AND addressee_id = ${requesterId})\n      LIMIT 1\n    `;\n        if (existing.length > 0) {\n            if (existing[0].status === \"pending\") {\n                throw new Error(\"Friend request already pending.\");\n            } else if (existing[0].status === \"accepted\") {\n                throw new Error(\"Already friends with this user.\");\n            } else if (existing[0].status === \"blocked\") {\n                throw new Error(\"Cannot send request due to existing block.\");\n            }\n        }\n        const result = await sql`\n      INSERT INTO friendships (requester_id, addressee_id, status)\n      VALUES (${requesterId}, ${addresseeId}, 'pending')\n      RETURNING *\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] createFriendship error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function updateFriendshipStatus(friendshipId, status) {\n    try {\n        const result = await sql`\n      UPDATE friendships \n      SET status = ${status}, updated_at = NOW()\n      WHERE id = ${friendshipId}\n      RETURNING *\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] updateFriendshipStatus error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function getFriendships(userId) {\n    try {\n        const result = await sql`\n      SELECT f.*, \n             u1.username as requester_username,\n             u2.username as addressee_username,\n             u1.name_color as requester_name_color,\n             u2.name_color as addressee_name_color,\n             u1.has_gold_animation as requester_has_gold,\n             u2.has_gold_animation as addressee_has_gold\n      FROM friendships f\n      JOIN users u1 ON f.requester_id = u1.id\n      JOIN users u2 ON f.addressee_id = u2.id\n      WHERE (f.requester_id = ${userId} OR f.addressee_id = ${userId})\n      ORDER BY f.created_at DESC\n    `;\n        return result;\n    } catch (err) {\n        console.error(\"[db] getFriendships error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function getAcceptedFriends(userId) {\n    try {\n        const result = await sql`\n      SELECT DISTINCT\n        CASE \n          WHEN f.requester_id = ${userId} THEN u2.id\n          ELSE u1.id\n        END as friend_id,\n        CASE \n          WHEN f.requester_id = ${userId} THEN u2.username\n          ELSE u1.username\n        END as friend_username,\n        CASE \n          WHEN f.requester_id = ${userId} THEN u2.name_color\n          ELSE u1.name_color\n        END as friend_name_color,\n        CASE \n          WHEN f.requester_id = ${userId} THEN u2.has_gold_animation\n          ELSE u1.has_gold_animation\n        END as friend_has_gold\n      FROM friendships f\n      JOIN users u1 ON f.requester_id = u1.id\n      JOIN users u2 ON f.addressee_id = u2.id\n      WHERE (f.requester_id = ${userId} OR f.addressee_id = ${userId})\n      AND f.status = 'accepted'\n      ORDER BY friend_username\n    `;\n        return result;\n    } catch (err) {\n        console.error(\"[db] getAcceptedFriends error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function getUserDMs(userId) {\n    try {\n        const result = await sql`\n      SELECT DISTINCT\n        CASE\n          WHEN m.sender_id = ${userId} THEN m.chat_id\n          ELSE m.sender_id\n        END as friend_id,\n        u.username as friend_username,\n        u.name_color as friend_name_color,\n        u.has_gold_animation as friend_has_gold,\n        MAX(m.created_at) as last_message_at\n      FROM messages m\n      JOIN users u ON \n        CASE\n          WHEN m.sender_id = ${userId} THEN m.chat_id\n          ELSE m.sender_id\n        END = u.id\n      WHERE m.chat_type = 'dm' \n      AND (m.sender_id = ${userId} OR m.chat_id = ${userId})\n      AND u.id != ${userId}\n      AND u.id != ${_lib_constants__WEBPACK_IMPORTED_MODULE_2__.AI_USER_ID}\n      GROUP BY friend_id, u.username, u.name_color, u.has_gold_animation\n      ORDER BY last_message_at DESC\n    `;\n        return result;\n    } catch (err) {\n        console.error(\"[db] getUserDMs error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function createNotification(userId, title, message, chatType, chatId, senderUsername) {\n    try {\n        const result = await sql`\n      INSERT INTO notifications (user_id, title, message, chat_type, chat_id, sender_username)\n      VALUES (${userId}, ${title}, ${message}, ${chatType}, ${chatId}, ${senderUsername})\n      RETURNING *\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] createNotification error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function getUnreadNotifications(userId) {\n    try {\n        const result = await sql`\n      SELECT * FROM notifications\n      WHERE user_id = ${userId} AND is_read = FALSE\n      ORDER BY created_at DESC\n    `;\n        return result;\n    } catch (err) {\n        console.error(\"[db] getUnreadNotifications error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function markNotificationAsRead(notificationId, userId) {\n    try {\n        const result = await sql`\n      UPDATE notifications\n      SET is_read = TRUE, created_at = NOW()\n      WHERE id = ${notificationId} AND user_id = ${userId}\n      RETURNING *\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] markNotificationAsRead error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function addMessageReaction(messageId, userId, emoji) {\n    try {\n        const result = await sql`\n      INSERT INTO message_reactions (message_id, user_id, emoji)\n      VALUES (${messageId}, ${userId}, ${emoji})\n      ON CONFLICT (message_id, user_id, emoji) DO NOTHING\n      RETURNING *\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] addMessageReaction error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function removeMessageReaction(messageId, userId, emoji) {\n    try {\n        await sql`\n      DELETE FROM message_reactions\n      WHERE message_id = ${messageId}\n        AND user_id   = ${userId}\n        AND emoji     = ${emoji}\n    `;\n        return true;\n    } catch (err) {\n        console.error(\"[db] removeMessageReaction error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function updateUserSettings(userId, updates) {\n    try {\n        const allowedFields = [\n            \"name_color\",\n            \"notifications_enabled\",\n            \"theme\",\n            \"hue\",\n            \"ui_mode\"\n        ];\n        const validUpdates = {};\n        for (const [key, value] of Object.entries(updates)){\n            if (allowedFields.includes(key)) {\n                validUpdates[key] = value;\n            }\n        }\n        if (Object.keys(validUpdates).length === 0) {\n            throw new Error(\"No valid fields to update\");\n        }\n        const setClause = Object.keys(validUpdates).map((key, index)=>`${key} = $${index + 2}`).join(\", \");\n        const queryString = `\n      UPDATE users \n      SET ${setClause}, updated_at = NOW()\n      WHERE id = $1\n      RETURNING id, username, email, signup_code, name_color, custom_title, has_gold_animation, notifications_enabled, theme, hue, profile_picture, bio, ui_mode\n    `;\n        const params = [\n            userId,\n            ...Object.values(validUpdates)\n        ];\n        const result = await sql.unsafe(queryString, params);\n        if (!result || result.length === 0) {\n            throw new Error(\"User not found or no settings updated.\");\n        }\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] updateUserSettings error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\n// Freeze feature\nasync function setUserFrozen(targetUserId, frozenByUserId, message) {\n    try {\n        const result = await sql`\n      UPDATE users\n      SET is_frozen = TRUE, frozen_by = ${frozenByUserId}, freeze_message = ${message || null}, updated_at = NOW()\n      WHERE id = ${targetUserId}\n      RETURNING id, is_frozen, frozen_by, freeze_message\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] setUserFrozen error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function clearUserFrozen(targetUserId) {\n    try {\n        const result = await sql`\n      UPDATE users\n      SET is_frozen = FALSE, frozen_by = NULL, freeze_message = NULL, updated_at = NOW()\n      WHERE id = ${targetUserId}\n      RETURNING id, is_frozen, frozen_by, freeze_message\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] clearUserFrozen error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\nasync function getUserFreezeStatus(userId) {\n    try {\n        const result = await sql`\n      SELECT is_frozen, frozen_by, freeze_message FROM users WHERE id = ${userId}\n    `;\n        return result[0];\n    } catch (err) {\n        console.error(\"[db] getUserFreezeStatus error:\", err);\n        throw new Error(\"Database error: \" + err.message);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./lib/db.ts\n");

/***/ })

});