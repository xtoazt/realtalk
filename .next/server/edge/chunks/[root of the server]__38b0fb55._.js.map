{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/lib/constants.ts"],"sourcesContent":["// lib/constants.ts\nexport const AI_USER_ID = \"00000000-0000-0000-0000-00000000000a\" // Example UUID for AI user\nexport const AI_USERNAME = \"real.AI\"\n"],"names":[],"mappings":"AAAA,mBAAmB;;;;;AACZ,MAAM,aAAa,uCAAuC,2BAA2B;;AACrF,MAAM,cAAc"}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/lib/db.ts"],"sourcesContent":["import \"server-only\"\nimport { neon } from \"@neondatabase/serverless\"\nimport { AI_USER_ID } from \"@/lib/constants\"\n\nconst sql = neon(process.env.DATABASE_URL!)\n\nexport const query = sql\nexport const db = sql\n\n// Database helper functions\nexport async function createUser(username: string, passwordHash: string, signupCode?: string) {\n  try {\n    let nameColor = null\n    const customTitle = null\n    let hasGoldAnimation = false\n\n    if (signupCode === \"asdf\") {\n      nameColor = \"#6366f1\"\n    } else if (signupCode === \"qwea\") {\n      hasGoldAnimation = true\n    }\n\n    const result = await sql`\n      INSERT INTO users (username, password_hash, signup_code, name_color, has_gold_animation, email, last_active, theme, hue)\n      VALUES (${username}, ${passwordHash}, ${signupCode}, ${nameColor}, ${hasGoldAnimation}, NULL, NOW(), 'light', 'blue')\n      RETURNING id, username, email, signup_code, name_color, custom_title, has_gold_animation, notifications_enabled, theme, hue, profile_picture, bio\n    `\n    return result[0]\n  } catch (err) {\n    console.error(\"[db] createUser error:\", err)\n    throw new Error(\"Database error: \" + (err as Error).message)\n  }\n}\n\nexport async function getUserByUsername(username: string) {\n  try {\n    const rows = await sql`\n      SELECT *\n      FROM users\n      WHERE username = ${username}\n      LIMIT 1\n    `\n    return rows[0]\n  } catch (err) {\n    console.error(\"[db] getUserByUsername error:\", err)\n    throw new Error(\"Database error: \" + (err as Error).message)\n  }\n}\n\nexport async function getUserById(id: string) {\n  try {\n    const result = await sql`\n      SELECT id, username, email, signup_code, name_color, custom_title, has_gold_animation, \n             notifications_enabled, theme, hue, profile_picture, bio\n      FROM users WHERE id = ${id}\n    `\n    return result[0]\n  } catch (err) {\n    console.error(\"[db] getUserById error:\", err)\n    throw new Error(\"Database error: \" + (err as Error).message)\n  }\n}\n\nexport async function updateUserActivity(userId: string) {\n  try {\n    await sql`\n      UPDATE users \n      SET last_active = NOW()\n      WHERE id = ${userId}\n    `\n    return true\n  } catch (err) {\n    console.error(\"[db] updateUserActivity error:\", err)\n    throw new Error(\"Database error: \" + (err as Error).message)\n  }\n}\n\nexport async function getOnlineUsers(currentUserId: string) {\n  try {\n    const result = await sql`\n      SELECT DISTINCT u.id, u.username, u.name_color, u.has_gold_animation, u.last_active\n      FROM users u\n      JOIN friendships f ON (\n        (f.requester_id = ${currentUserId} AND f.addressee_id = u.id) OR\n        (f.addressee_id = ${currentUserId} AND f.requester_id = u.id)\n      )\n      WHERE u.last_active > NOW() - INTERVAL '10 minutes'\n      AND f.status = 'accepted'\n      AND u.id != ${currentUserId}\n      AND u.id != ${AI_USER_ID}\n      ORDER BY u.username\n    `\n    return result\n  } catch (err) {\n    console.error(\"[db] getOnlineUsers error:\", err)\n    throw new Error(\"Database error: \" + (err as Error).message)\n  }\n}\n\nexport async function searchUsers(searchQuery: string, currentUserId: string) {\n  try {\n    const result = await sql`\n      SELECT id, username, name_color, custom_title, has_gold_animation\n      FROM users \n      WHERE username ILIKE ${`%${searchQuery}%`} \n      AND id != ${currentUserId}\n      AND id != ${AI_USER_ID}\n      LIMIT 10\n    `\n    return result\n  } catch (err) {\n    console.error(\"[db] searchUsers error:\", err)\n    throw new Error(\"Database error: \" + (err as Error).message)\n  }\n}\n\nexport async function getMessages(chatType: string, chatId?: string, userId?: string, limit = 50) {\n  try {\n    if (chatType === \"global\") {\n      const result = await sql`\n        SELECT m.*, u.username, u.name_color, u.custom_title, u.has_gold_animation,\n               COALESCE(\n                 json_agg(\n                   json_build_object(\n                     'emoji', mr.emoji,\n                     'count', mr.reaction_count,\n                     'reacted_by_me', CASE WHEN mr.user_reacted THEN true ELSE false END\n                   )\n                 ) FILTER (WHERE mr.emoji IS NOT NULL), \n                 '[]'::json\n               ) as reactions,\n               pm.content AS parent_message_content,\n               pu.username AS parent_message_username\n        FROM messages m\n        JOIN users u ON m.sender_id = u.id\n        LEFT JOIN (\n          SELECT \n            message_id,\n            emoji,\n            COUNT(*) as reaction_count,\n            BOOL_OR(user_id = ${userId || null}) as user_reacted\n          FROM message_reactions\n          GROUP BY message_id, emoji\n        ) mr ON m.id = mr.message_id\n        LEFT JOIN messages pm ON m.parent_message_id = pm.id\n        LEFT JOIN users pu ON pm.sender_id = pu.id\n        WHERE m.chat_type = 'global'\n        GROUP BY m.id, u.username, u.name_color, u.custom_title, u.has_gold_animation, pm.content, pu.username\n        ORDER BY m.created_at DESC\n        LIMIT ${limit}\n      `\n      return result.reverse()\n    } else if (chatType === \"dm\") {\n      const result = await sql`\n        SELECT m.*, u.username, u.name_color, u.custom_title, u.has_gold_animation,\n               COALESCE(\n                 json_agg(\n                   json_build_object(\n                     'emoji', mr.emoji,\n                     'count', mr.reaction_count,\n                     'reacted_by_me', CASE WHEN mr.user_reacted THEN true ELSE false END\n                   )\n                 ) FILTER (WHERE mr.emoji IS NOT NULL), \n                 '[]'::json\n               ) as reactions,\n               pm.content AS parent_message_content,\n               pu.username AS parent_message_username\n        FROM messages m\n        JOIN users u ON m.sender_id = u.id\n        LEFT JOIN (\n          SELECT \n            message_id,\n            emoji,\n            COUNT(*) as reaction_count,\n            BOOL_OR(user_id = ${userId || null}) as user_reacted\n          FROM message_reactions\n          GROUP BY message_id, emoji\n        ) mr ON m.id = mr.message_id\n        LEFT JOIN messages pm ON m.parent_message_id = pm.id\n        LEFT JOIN users pu ON pm.sender_id = pu.id\n        WHERE m.chat_type = 'dm' \n          AND ((m.sender_id = ${userId} AND m.chat_id = ${chatId}) \n               OR (m.sender_id = ${chatId} AND m.chat_id = ${userId}))\n        GROUP BY m.id, u.username, u.name_color, u.custom_title, u.has_gold_animation, pm.content, pu.username\n        ORDER BY m.created_at DESC\n        LIMIT ${limit}\n      `\n      return result.reverse()\n    } else if (chatType === \"channel\") {\n      const result = await sql`\n        SELECT m.*, u.username, u.name_color, u.custom_title, u.has_gold_animation,\n               COALESCE(\n                 json_agg(\n                   json_build_object(\n                     'emoji', mr.emoji,\n                     'count', mr.reaction_count,\n                     'reacted_by_me', CASE WHEN mr.user_reacted THEN true ELSE false END\n                   )\n                 ) FILTER (WHERE mr.emoji IS NOT NULL), \n                 '[]'::json\n               ) as reactions,\n               pm.content AS parent_message_content,\n               pu.username AS parent_message_username\n        FROM messages m\n        JOIN users u ON m.sender_id = u.id\n        LEFT JOIN (\n          SELECT \n            message_id,\n            emoji,\n            COUNT(*) as reaction_count,\n            BOOL_OR(user_id = ${userId || null}) as user_reacted\n          FROM message_reactions\n          GROUP BY message_id, emoji\n        ) mr ON m.id = mr.message_id\n        LEFT JOIN messages pm ON m.parent_message_id = pm.id\n        LEFT JOIN users pu ON pm.sender_id = pu.id\n        WHERE m.chat_type = 'channel' AND m.chat_id = ${chatId}\n        GROUP BY m.id, u.username, u.name_color, u.custom_title, u.has_gold_animation, pm.content, pu.username\n        ORDER BY m.created_at DESC\n        LIMIT ${limit}\n      `\n      return result.reverse()\n    } else {\n      const result = await sql`\n        SELECT m.*, u.username, u.name_color, u.custom_title, u.has_gold_animation,\n               COALESCE(\n                 json_agg(\n                   json_build_object(\n                     'emoji', mr.emoji,\n                     'count', mr.reaction_count,\n                     'reacted_by_me', CASE WHEN mr.user_reacted THEN true ELSE false END\n                   )\n                 ) FILTER (WHERE mr.emoji IS NOT NULL), \n                 '[]'::json\n               ) as reactions,\n               pm.content AS parent_message_content,\n               pu.username AS parent_message_username\n        FROM messages m\n        JOIN users u ON m.sender_id = u.id\n        LEFT JOIN (\n          SELECT \n            message_id,\n            emoji,\n            COUNT(*) as reaction_count,\n            BOOL_OR(user_id = ${userId || null}) as user_reacted\n          FROM message_reactions\n          GROUP BY message_id, emoji\n        ) mr ON m.id = mr.message_id\n        LEFT JOIN messages pm ON m.parent_message_id = pm.id\n        LEFT JOIN users pu ON pm.sender_id = pu.id\n        WHERE m.chat_type = ${chatType} AND m.chat_id = ${chatId}\n        GROUP BY m.id, u.username, u.name_color, u.custom_title, u.has_gold_animation, pm.content, pu.username\n        ORDER BY m.created_at DESC\n        LIMIT ${limit}\n      `\n      return result.reverse()\n    }\n  } catch (err) {\n    console.error(\"[db] getMessages error:\", err)\n    throw new Error(\"Database error: \" + (err as Error).message)\n  }\n}\n\nexport async function createMessage(\n  senderId: string,\n  content: string,\n  chatType: string,\n  chatId?: string,\n  mentions: string[] = [],\n  isAiResponse = false,\n  parentMessageId?: string,\n  messageType = \"text\",\n) {\n  try {\n    const result = await sql`\n      INSERT INTO messages (sender_id, content, chat_type, chat_id, mentions, is_ai_response, parent_message_id, message_type)\n      VALUES (${senderId}, ${content}, ${chatType}, ${chatId}, ${mentions}, ${isAiResponse}, ${parentMessageId}, ${messageType})\n      RETURNING *\n    `\n    return result[0]\n  } catch (err) {\n    console.error(\"[db] createMessage error:\", err)\n    throw new Error(\"Database error: \" + (err as Error).message)\n  }\n}\n\nexport async function createGroupChat(name: string, creatorId: string, memberIds: string[] = []) {\n  try {\n    const result = await sql`\n      INSERT INTO group_chats (name, creator_id)\n      VALUES (${name}, ${creatorId})\n      RETURNING *\n    `\n\n    await sql`\n      INSERT INTO group_chat_members (group_chat_id, user_id)\n      VALUES (${result[0].id}, ${creatorId})\n    `\n\n    for (const memberId of memberIds) {\n      if (memberId !== creatorId) {\n        await sql`\n          INSERT INTO group_chat_members (group_chat_id, user_id)\n          VALUES (${result[0].id}, ${memberId})\n          ON CONFLICT (group_chat_id, user_id) DO NOTHING\n        `\n      }\n    }\n\n    return result[0]\n  } catch (err) {\n    console.error(\"[db] createGroupChat error:\", err)\n    throw new Error(\"Database error: \" + (err as Error).message)\n  }\n}\n\nexport async function getUserGroupChats(userId: string) {\n  try {\n    const result = await sql`\n      SELECT gc.*, u.username as creator_username\n      FROM group_chats gc\n      JOIN group_chat_members gcm ON gc.id = gcm.group_chat_id\n      JOIN users u ON gc.creator_id = u.id\n      WHERE gcm.user_id = ${userId}\n      ORDER BY gc.updated_at DESC\n    `\n    return result\n  } catch (err) {\n    console.error(\"[db] getUserGroupChats error:\", err)\n    throw new Error(\"Database error: \" + (err as Error).message)\n  }\n}\n\nexport async function deleteGroupChat(groupId: string, creatorId: string) {\n  try {\n    const chat = await sql`SELECT creator_id FROM group_chats WHERE id = ${groupId}`\n    if (!chat[0] || chat[0].creator_id !== creatorId) {\n      throw new Error(\"Unauthorized to delete this group chat.\")\n    }\n\n    await sql`BEGIN`\n    await sql`DELETE FROM messages WHERE chat_type = 'group' AND chat_id = ${groupId}`\n    await sql`DELETE FROM group_chat_members WHERE group_chat_id = ${groupId}`\n    await sql`DELETE FROM group_chats WHERE id = ${groupId}`\n    await sql`COMMIT`\n\n    return true\n  } catch (err) {\n    await sql`ROLLBACK`\n    console.error(\"[db] deleteGroupChat error:\", err)\n    throw new Error(\"Database error: \" + (err as Error).message)\n  }\n}\n\nexport async function createFriendship(requesterId: string, addresseeId: string) {\n  try {\n    if (requesterId === addresseeId) {\n      throw new Error(\"Cannot send friend request to yourself.\")\n    }\n\n    const existing = await sql`\n      SELECT * FROM friendships\n      WHERE (requester_id = ${requesterId} AND addressee_id = ${addresseeId})\n         OR (requester_id = ${addresseeId} AND addressee_id = ${requesterId})\n      LIMIT 1\n    `\n\n    if (existing.length > 0) {\n      if (existing[0].status === \"pending\") {\n        throw new Error(\"Friend request already pending.\")\n      } else if (existing[0].status === \"accepted\") {\n        throw new Error(\"Already friends with this user.\")\n      } else if (existing[0].status === \"blocked\") {\n        throw new Error(\"Cannot send request due to existing block.\")\n      }\n    }\n\n    const result = await sql`\n      INSERT INTO friendships (requester_id, addressee_id, status)\n      VALUES (${requesterId}, ${addresseeId}, 'pending')\n      RETURNING *\n    `\n    return result[0]\n  } catch (err) {\n    console.error(\"[db] createFriendship error:\", err)\n    throw new Error(\"Database error: \" + (err as Error).message)\n  }\n}\n\nexport async function updateFriendshipStatus(friendshipId: string, status: string) {\n  try {\n    const result = await sql`\n      UPDATE friendships \n      SET status = ${status}, updated_at = NOW()\n      WHERE id = ${friendshipId}\n      RETURNING *\n    `\n    return result[0]\n  } catch (err) {\n    console.error(\"[db] updateFriendshipStatus error:\", err)\n    throw new Error(\"Database error: \" + (err as Error).message)\n  }\n}\n\nexport async function getFriendships(userId: string) {\n  try {\n    const result = await sql`\n      SELECT f.*, \n             u1.username as requester_username,\n             u2.username as addressee_username,\n             u1.name_color as requester_name_color,\n             u2.name_color as addressee_name_color,\n             u1.has_gold_animation as requester_has_gold,\n             u2.has_gold_animation as addressee_has_gold\n      FROM friendships f\n      JOIN users u1 ON f.requester_id = u1.id\n      JOIN users u2 ON f.addressee_id = u2.id\n      WHERE (f.requester_id = ${userId} OR f.addressee_id = ${userId})\n      ORDER BY f.created_at DESC\n    `\n    return result\n  } catch (err) {\n    console.error(\"[db] getFriendships error:\", err)\n    throw new Error(\"Database error: \" + (err as Error).message)\n  }\n}\n\nexport async function getAcceptedFriends(userId: string) {\n  try {\n    const result = await sql`\n      SELECT DISTINCT\n        CASE \n          WHEN f.requester_id = ${userId} THEN u2.id\n          ELSE u1.id\n        END as friend_id,\n        CASE \n          WHEN f.requester_id = ${userId} THEN u2.username\n          ELSE u1.username\n        END as friend_username,\n        CASE \n          WHEN f.requester_id = ${userId} THEN u2.name_color\n          ELSE u1.name_color\n        END as friend_name_color,\n        CASE \n          WHEN f.requester_id = ${userId} THEN u2.has_gold_animation\n          ELSE u1.has_gold_animation\n        END as friend_has_gold\n      FROM friendships f\n      JOIN users u1 ON f.requester_id = u1.id\n      JOIN users u2 ON f.addressee_id = u2.id\n      WHERE (f.requester_id = ${userId} OR f.addressee_id = ${userId})\n      AND f.status = 'accepted'\n      ORDER BY friend_username\n    `\n    return result\n  } catch (err) {\n    console.error(\"[db] getAcceptedFriends error:\", err)\n    throw new Error(\"Database error: \" + (err as Error).message)\n  }\n}\n\nexport async function getUserDMs(userId: string) {\n  try {\n    const result = await sql`\n      SELECT DISTINCT\n        CASE\n          WHEN m.sender_id = ${userId} THEN m.chat_id\n          ELSE m.sender_id\n        END as friend_id,\n        u.username as friend_username,\n        u.name_color as friend_name_color,\n        u.has_gold_animation as friend_has_gold,\n        MAX(m.created_at) as last_message_at\n      FROM messages m\n      JOIN users u ON \n        CASE\n          WHEN m.sender_id = ${userId} THEN m.chat_id\n          ELSE m.sender_id\n        END = u.id\n      WHERE m.chat_type = 'dm' \n      AND (m.sender_id = ${userId} OR m.chat_id = ${userId})\n      AND u.id != ${userId}\n      AND u.id != ${AI_USER_ID}\n      GROUP BY friend_id, u.username, u.name_color, u.has_gold_animation\n      ORDER BY last_message_at DESC\n    `\n    return result\n  } catch (err) {\n    console.error(\"[db] getUserDMs error:\", err)\n    throw new Error(\"Database error: \" + (err as Error).message)\n  }\n}\n\nexport async function createNotification(\n  userId: string,\n  title: string,\n  message: string,\n  chatType?: string,\n  chatId?: string,\n  senderUsername?: string,\n) {\n  try {\n    const result = await sql`\n      INSERT INTO notifications (user_id, title, message, chat_type, chat_id, sender_username)\n      VALUES (${userId}, ${title}, ${message}, ${chatType}, ${chatId}, ${senderUsername})\n      RETURNING *\n    `\n    return result[0]\n  } catch (err) {\n    console.error(\"[db] createNotification error:\", err)\n    throw new Error(\"Database error: \" + (err as Error).message)\n  }\n}\n\nexport async function getUnreadNotifications(userId: string) {\n  try {\n    const result = await sql`\n      SELECT * FROM notifications\n      WHERE user_id = ${userId} AND is_read = FALSE\n      ORDER BY created_at DESC\n    `\n    return result\n  } catch (err) {\n    console.error(\"[db] getUnreadNotifications error:\", err)\n    throw new Error(\"Database error: \" + (err as Error).message)\n  }\n}\n\nexport async function markNotificationAsRead(notificationId: string, userId: string) {\n  try {\n    const result = await sql`\n      UPDATE notifications\n      SET is_read = TRUE, created_at = NOW()\n      WHERE id = ${notificationId} AND user_id = ${userId}\n      RETURNING *\n    `\n    return result[0]\n  } catch (err) {\n    console.error(\"[db] markNotificationAsRead error:\", err)\n    throw new Error(\"Database error: \" + (err as Error).message)\n  }\n}\n\nexport async function addMessageReaction(messageId: string, userId: string, emoji: string) {\n  try {\n    const result = await sql`\n      INSERT INTO message_reactions (message_id, user_id, emoji)\n      VALUES (${messageId}, ${userId}, ${emoji})\n      ON CONFLICT (message_id, user_id, emoji) DO NOTHING\n      RETURNING *\n    `\n    return result[0]\n  } catch (err) {\n    console.error(\"[db] addMessageReaction error:\", err)\n    throw new Error(\"Database error: \" + (err as Error).message)\n  }\n}\n\nexport async function removeMessageReaction(messageId: string, userId: string, emoji: string) {\n  try {\n    await sql`\n      DELETE FROM message_reactions\n      WHERE message_id = ${messageId}\n        AND user_id   = ${userId}\n        AND emoji     = ${emoji}\n    `\n    return true\n  } catch (err) {\n    console.error(\"[db] removeMessageReaction error:\", err)\n    throw new Error(\"Database error: \" + (err as Error).message)\n  }\n}\n\nexport async function updateUserSettings(userId: string, updates: any) {\n  try {\n    const allowedFields = [\"custom_title\", \"name_color\", \"notifications_enabled\", \"theme\", \"hue\"]\n    const validUpdates: any = {}\n\n    for (const [key, value] of Object.entries(updates)) {\n      if (allowedFields.includes(key)) {\n        validUpdates[key] = value\n      }\n    }\n\n    if (Object.keys(validUpdates).length === 0) {\n      throw new Error(\"No valid fields to update\")\n    }\n\n    const setClause = Object.keys(validUpdates)\n      .map((key, index) => `${key} = $${index + 2}`)\n      .join(\", \")\n\n    const queryString = `\n      UPDATE users \n      SET ${setClause}, updated_at = NOW()\n      WHERE id = $1\n      RETURNING id, username, email, signup_code, name_color, custom_title, has_gold_animation, notifications_enabled, theme, hue, profile_picture, bio\n    `\n\n    const params = [userId, ...Object.values(validUpdates)]\n    const result = await sql.unsafe(queryString, params)\n\n    if (result.length === 0) {\n      throw new Error(\"User not found or no settings updated.\")\n    }\n\n    return result[0]\n  } catch (err) {\n    console.error(\"[db] updateUserSettings error:\", err)\n    throw new Error(\"Database error: \" + (err as Error).message)\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 633, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/lib/auth.ts"],"sourcesContent":["import { SignJWT, jwtVerify } from \"jose\"\nimport { cookies } from \"next/headers\"\nimport { query } from \"@/lib/db\"\nimport bcrypt from \"bcryptjs\"\n\nconst key = new TextEncoder().encode(process.env.JWT_SECRET || \"fallback-secret-key\")\n\nexport async function encrypt(payload: any) {\n  return await new SignJWT(payload)\n    .setProtectedHeader({ alg: \"HS256\" })\n    .setIssuedAt()\n    .setExpirationTime(\"24h\")\n    .sign(key)\n}\n\nexport async function decrypt(input: string): Promise<any> {\n  const { payload } = await jwtVerify(input, key, {\n    algorithms: [\"HS256\"],\n  })\n  return payload\n}\n\nexport async function verifyToken(token: string) {\n  try {\n    return await decrypt(token)\n  } catch {\n    return null\n  }\n}\n\nexport async function getCurrentUser() {\n  const cookieStore = await cookies()\n  const token = cookieStore.get(\"auth-token\")?.value\n\n  if (!token) return null\n\n  try {\n    const payload = await decrypt(token)\n    const users = await query`SELECT * FROM users WHERE id = ${payload.userId}`\n    return users[0] || null\n  } catch {\n    return null\n  }\n}\n\nexport async function hashPassword(password: string) {\n  return await bcrypt.hash(password, 12)\n}\n\nexport async function signUp(username: string, password: string, signupCode?: string) {\n  const hashedPassword = await hashPassword(password)\n\n  // Set default values based on signup code\n  let nameColor = null\n  let hasGoldAnimation = false\n\n  if (signupCode === \"asdf\") {\n    nameColor = \"#6366f1\" // Default indigo color\n  } else if (signupCode === \"qwea\") {\n    hasGoldAnimation = true\n  }\n\n  const users = await query`\n    INSERT INTO users (username, password_hash, signup_code, name_color, has_gold_animation, theme, hue, notifications_enabled, last_active)\n    VALUES (${username}, ${hashedPassword}, ${signupCode || null}, ${nameColor}, ${hasGoldAnimation}, 'light', 'blue', false, NOW())\n    RETURNING *\n  `\n\n  const user = users[0]\n  const token = await encrypt({ userId: user.id })\n\n  return { user, token }\n}\n\nexport async function signIn(username: string, password: string) {\n  const users = await query`SELECT * FROM users WHERE username = ${username}`\n  const user = users[0]\n\n  if (!user) {\n    throw new Error(\"Invalid username or password\")\n  }\n\n  const isValid = await bcrypt.compare(password, user.password_hash)\n  if (!isValid) {\n    throw new Error(\"Invalid username or password\")\n  }\n\n  const token = await encrypt({ userId: user.id })\n  return { user, token }\n}\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAAA;AACA;AAAA;AACA;AACA;;;;;AAEA,MAAM,MAAM,IAAI,cAAc,MAAM,CAAC,QAAQ,GAAG,CAAC,UAAU,IAAI;AAExD,eAAe,QAAQ,OAAY;IACxC,OAAO,MAAM,IAAI,+MAAA,CAAA,UAAO,CAAC,SACtB,kBAAkB,CAAC;QAAE,KAAK;IAAQ,GAClC,WAAW,GACX,iBAAiB,CAAC,OAClB,IAAI,CAAC;AACV;AAEO,eAAe,QAAQ,KAAa;IACzC,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,iNAAA,CAAA,YAAS,AAAD,EAAE,OAAO,KAAK;QAC9C,YAAY;YAAC;SAAQ;IACvB;IACA,OAAO;AACT;AAEO,eAAe,YAAY,KAAa;IAC7C,IAAI;QACF,OAAO,MAAM,QAAQ;IACvB,EAAE,OAAM;QACN,OAAO;IACT;AACF;AAEO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,0SAAA,CAAA,UAAO,AAAD;IAChC,MAAM,QAAQ,YAAY,GAAG,CAAC,eAAe;IAE7C,IAAI,CAAC,OAAO,OAAO;IAEnB,IAAI;QACF,MAAM,UAAU,MAAM,QAAQ;QAC9B,MAAM,QAAQ,MAAM,iHAAA,CAAA,QAAK,CAAC,+BAA+B,EAAE,QAAQ,MAAM,CAAC,CAAC;QAC3E,OAAO,KAAK,CAAC,EAAE,IAAI;IACrB,EAAE,OAAM;QACN,OAAO;IACT;AACF;AAEO,eAAe,aAAa,QAAgB;IACjD,OAAO,MAAM,8LAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;AACrC;AAEO,eAAe,OAAO,QAAgB,EAAE,QAAgB,EAAE,UAAmB;IAClF,MAAM,iBAAiB,MAAM,aAAa;IAE1C,0CAA0C;IAC1C,IAAI,YAAY;IAChB,IAAI,mBAAmB;IAEvB,IAAI,eAAe,QAAQ;QACzB,YAAY,UAAU,uBAAuB;;IAC/C,OAAO,IAAI,eAAe,QAAQ;QAChC,mBAAmB;IACrB;IAEA,MAAM,QAAQ,MAAM,iHAAA,CAAA,QAAK,CAAC;;YAEhB,EAAE,SAAS,EAAE,EAAE,eAAe,EAAE,EAAE,cAAc,KAAK,EAAE,EAAE,UAAU,EAAE,EAAE,iBAAiB;;EAElG,CAAC;IAED,MAAM,OAAO,KAAK,CAAC,EAAE;IACrB,MAAM,QAAQ,MAAM,QAAQ;QAAE,QAAQ,KAAK,EAAE;IAAC;IAE9C,OAAO;QAAE;QAAM;IAAM;AACvB;AAEO,eAAe,OAAO,QAAgB,EAAE,QAAgB;IAC7D,MAAM,QAAQ,MAAM,iHAAA,CAAA,QAAK,CAAC,qCAAqC,EAAE,SAAS,CAAC;IAC3E,MAAM,OAAO,KAAK,CAAC,EAAE;IAErB,IAAI,CAAC,MAAM;QACT,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,UAAU,MAAM,8LAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,aAAa;IACjE,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,QAAQ,MAAM,QAAQ;QAAE,QAAQ,KAAK,EAAE;IAAC;IAC9C,OAAO;QAAE;QAAM;IAAM;AACvB"}},
    {"offset": {"line": 737, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { NextResponse } from \"next/server\"\nimport type { NextRequest } from \"next/server\"\nimport { verifyToken } from \"@/lib/auth\"\n\nexport function middleware(request: NextRequest) {\n  // Add console logs to trace the middleware execution\n  console.log(\"[middleware] Request URL:\", request.url)\n  const { pathname } = request.nextUrl\n  console.log(\"[middleware] Pathname:\", pathname)\n\n  const token = request.cookies.get(\"auth-token\")?.value\n  console.log(\"[middleware] Auth token found:\", !!token)\n\n  // Public routes that don't require authentication\n  const publicRoutes = [\"/auth\", \"/\"]\n  const isPublicRoute = publicRoutes.includes(pathname)\n\n  // If no token and trying to access protected route\n  if (!token && !isPublicRoute) {\n    console.log(\"[middleware] No token, redirecting to /auth\")\n    return NextResponse.redirect(new URL(\"/auth\", request.url))\n  }\n\n  // If token exists, verify it\n  if (token) {\n    const decoded = verifyToken(token)\n    console.log(\"[middleware] Token decoded:\", !!decoded)\n\n    // If token is invalid and trying to access protected route\n    if (!decoded && !isPublicRoute) {\n      console.log(\"[middleware] Invalid token, redirecting to /auth and deleting cookie.\")\n      const response = NextResponse.redirect(new URL(\"/auth\", request.url))\n      response.cookies.delete(\"auth-token\")\n      return response\n    }\n\n    // If token is valid and trying to access auth page, redirect to dashboard\n    if (decoded && pathname === \"/auth\") {\n      console.log(\"[middleware] Token valid, on /auth page, redirecting to /dashboard.\")\n      return NextResponse.redirect(new URL(\"/dashboard\", request.url))\n    }\n    if (decoded && !isPublicRoute) {\n      console.log(\"[middleware] Token valid, accessing protected route.\")\n    }\n  }\n\n  console.log(\"[middleware] Proceeding to next response.\")\n  return NextResponse.next()\n}\n\nexport const config = {\n  matcher: [\"/((?!api|_next/static|_next/image|favicon.ico).*)\"],\n}\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAEA;;;AAEO,SAAS,WAAW,OAAoB;IAC7C,qDAAqD;IACrD,QAAQ,GAAG,CAAC,6BAA6B,QAAQ,GAAG;IACpD,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IACpC,QAAQ,GAAG,CAAC,0BAA0B;IAEtC,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,eAAe;IACjD,QAAQ,GAAG,CAAC,kCAAkC,CAAC,CAAC;IAEhD,kDAAkD;IAClD,MAAM,eAAe;QAAC;QAAS;KAAI;IACnC,MAAM,gBAAgB,aAAa,QAAQ,CAAC;IAE5C,mDAAmD;IACnD,IAAI,CAAC,SAAS,CAAC,eAAe;QAC5B,QAAQ,GAAG,CAAC;QACZ,OAAO,4TAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,SAAS,QAAQ,GAAG;IAC3D;IAEA,6BAA6B;IAC7B,IAAI,OAAO;QACT,MAAM,UAAU,CAAA,GAAA,mHAAA,CAAA,cAAW,AAAD,EAAE;QAC5B,QAAQ,GAAG,CAAC,+BAA+B,CAAC,CAAC;QAE7C,2DAA2D;QAC3D,IAAI,CAAC,WAAW,CAAC,eAAe;YAC9B,QAAQ,GAAG,CAAC;YACZ,MAAM,WAAW,4TAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,SAAS,QAAQ,GAAG;YACnE,SAAS,OAAO,CAAC,MAAM,CAAC;YACxB,OAAO;QACT;QAEA,0EAA0E;QAC1E,IAAI,WAAW,aAAa,SAAS;YACnC,QAAQ,GAAG,CAAC;YACZ,OAAO,4TAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,GAAG;QAChE;QACA,IAAI,WAAW,CAAC,eAAe;YAC7B,QAAQ,GAAG,CAAC;QACd;IACF;IAEA,QAAQ,GAAG,CAAC;IACZ,OAAO,4TAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;KAAoD;AAChE"}}]
}